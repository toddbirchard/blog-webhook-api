{
    "posts": [
        {
            "id": "5ec5ea6f336dbc09ef26dca8",
            "uuid": "eecb7ecb-860f-4acd-a943-32a0350c6017",
            "title": "Create Your First Golang App",
            "slug": "create-your-first-golang-app",
            "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"$ brew update\\n$ brew install golang\",\"language\":\"shell\",\"caption\":\"Install Golang via Homebrew\"}],[\"code\",{\"code\":\"$ vim ~/.zshrc\",\"language\":\"shell\",\"caption\":\"Modify shell script\"}],[\"code\",{\"code\":\"export GOPATH=/Users/toddbirchard/go\\nexport PATH=$PATH:$GOPATH\\nexport PATH=$PATH:$GOPATH/bin\",\"language\":\"shell\",\"caption\":\"Add GOPATH to your PATH\"}],[\"code\",{\"code\":\". ~/.zshrc\",\"language\":\"shell\",\"caption\":\"Active changes\"}],[\"code\",{\"code\":\"$ go version\\n>> go version go1.14.2 darwin/amd64\",\"language\":\"shell\",\"caption\":\"Verify Installation\"}],[\"code\",{\"code\":\"$ go env GOPATH\\n>> /Users/toddbirchard/go\",\"language\":\"shell\",\"caption\":\"Verify GOPATH\"}],[\"code\",{\"code\":\"/go\\n‚îú‚îÄ‚îÄ /bin\\n‚îú‚îÄ‚îÄ /pkg\\n‚îî‚îÄ‚îÄ /src\",\"language\":\"shell\",\"caption\":\"Structure of our GOPATH.\"}],[\"code\",{\"code\":\"/go\\n‚îú‚îÄ‚îÄ /bin\\n‚îÇ   ‚îú‚îÄ‚îÄ golint\\n‚îÇ   ‚îî‚îÄ‚îÄ tour\\n‚îú‚îÄ‚îÄ /pkg\\n‚îÇ   ‚îú‚îÄ‚îÄ /darwin_amd64\\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ github.com\\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ go-pandas.a\\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ golangwebsite\\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hustlers\\n‚îÇ   ‚îú‚îÄ‚îÄ /mod\\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /cache\\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /cloud.google.com\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ go@v0.57.0\\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /github.com\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /google\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ go-cmp@v0.4.0\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /gorilla\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mux@v1.7.4\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /mattn\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ go-runewidth@v0.0.7\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /olekukonko\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tablewriter@v0.0.4\\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ /rocketlaunchr\\n‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ dataframe-go@v0.0.0-20200520082355-50e589cfde42\\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ golang.org\\n‚îÇ   ‚îî‚îÄ‚îÄ /sumdb\\n‚îÇ       ‚îî‚îÄ‚îÄ sum.golang.org\\n‚îî‚îÄ‚îÄ /src\\n    ‚îú‚îÄ‚îÄ /golang-helloworld\\n    ‚îÇ   ‚îú‚îÄ‚îÄ README.md\\n    ‚îÇ   ‚îú‚îÄ‚îÄ go.mod\\n    ‚îÇ   ‚îú‚îÄ‚îÄ go.sum\\n    ‚îÇ   ‚îú‚îÄ‚îÄ golang-helloworld\\n    ‚îÇ   ‚îî‚îÄ‚îÄ main.go\\n    ‚îú‚îÄ‚îÄ /golang.org\\n    ‚îÇ   ‚îî‚îÄ‚îÄ x\\n    ‚îî‚îÄ‚îÄ /hustlers\\n        ‚îú‚îÄ‚îÄ README.md\\n        ‚îú‚îÄ‚îÄ go.mod\\n        ‚îú‚îÄ‚îÄ go.sum\\n        ‚îú‚îÄ‚îÄ hustlers\\n        ‚îú‚îÄ‚îÄ main.go\\n        ‚îú‚îÄ‚îÄ main_test.go\\n        ‚îú‚îÄ‚îÄ static\\n        ‚îú‚îÄ‚îÄ templates\\n        ‚îî‚îÄ‚îÄ vendor\",\"caption\":\"My GOPATH.\",\"language\":\"shell\"}],[\"code\",{\"code\":\"$ cd $GOPATH/src\\n$ mkdir golang-helloworld\\n$ cd golang-helloworld\\n\",\"language\":\"shell\"}],[\"code\",{\"code\":\"$ go mod init github.com/hackersandslackers/golang-helloworld\\n>> go: creating new go.mod: module github.com/hackersandslackers/golang-helloworld\",\"language\":\"shell\",\"caption\":\"Creating a Go module.\"}],[\"code\",{\"code\":\"module github.com/hackersandslackers/golang-helloworld\\n  \\ngo 1.14\",\"language\":\"shell\",\"caption\":\"go.mod\"}],[\"code\",{\"code\":\"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tfmt.Println(\\\"Hello, world.\\\")\\n}\",\"language\":\"go\",\"caption\":\"main.go\"}],[\"code\",{\"code\":\"$ go build\\n$ go run main.go\\n>> Hello, world.\\n\",\"language\":\"shell\",\"caption\":\"Build and run your module.\"}],[\"code\",{\"code\":\"/golang-helloworld\\n‚îú‚îÄ‚îÄ go.mod\\n‚îú‚îÄ‚îÄ golang-helloworld\\n‚îî‚îÄ‚îÄ main.go\\n\",\"language\":\"shell\",\"caption\":\"Our project so far.\"}],[\"code\",{\"code\":\"$ go fmt\\n>> main.go\",\"language\":\"shell\",\"caption\":\"Formatting source code.\"}],[\"bookmark\",{\"type\":\"bookmark\",\"url\":\"https://github.com/gorilla/mux\",\"metadata\":{\"url\":\"https://github.com/gorilla/mux\",\"title\":\"gorilla/mux\",\"description\":\"A powerful HTTP router and URL matcher for building Go web servers with ü¶ç - gorilla/mux\",\"author\":\"gorilla\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://avatars0.githubusercontent.com/u/489566?s=400&v=4\",\"icon\":\"https://github.githubassets.com/favicons/favicon.svg\"}}],[\"code\",{\"code\":\"$ go get -u github.com/gorilla/mux\\n$ go install github.com/gorilla/mux \",\"language\":\"shell\",\"caption\":\"Install a dependency.\"}],[\"code\",{\"code\":\"module github.com/hackersandslackers/golang-helloworld\\n  \\ngo 1.14\\n\\nrequire github.com/gorilla/mux v1.7.4\",\"language\":\"shell\",\"caption\":\"go.mod\"}],[\"code\",{\"code\":\"package main\\n\\nimport (\\n\\t\\\"github.com/gorilla/mux\\\"\\n\\t\\\"log\\\"\\n\\t\\\"net/http\\\"\\n\\t\\\"time\\\"\\n\\t\\\"io\\\"\\n)\\n\\nfunc handler(w http.ResponseWriter, r *http.Request) {\\n\\tio.WriteString(w, \\\"Hello, world!\\\\n\\\")\\n}\\n\\n// Route declaration\\nfunc router() *mux.Router {\\n\\tr := mux.NewRouter()\\n\\tr.HandleFunc(\\\"/\\\", handler)\\n\\treturn r\\n}\\n\\n// Initiate web server\\nfunc main() {\\n\\trouter := router()\\n\\tsrv := &http.Server{\\n\\t\\tHandler: router,\\n\\t\\tAddr:    \\\"127.0.0.1:9100\\\",\\n\\t\\tWriteTimeout: 15 * time.Second,\\n\\t\\tReadTimeout:  15 * time.Second,\\n\\t}\\n\\n\\tlog.Fatal(srv.ListenAndServe())\\n}\",\"language\":\"go\",\"caption\":\"main.go\"}],[\"code\",{\"code\":\"r.HandleFunc([URL_ROUTE], [FUNCTION_TO_EXECUTE])\",\"language\":\"go\",\"caption\":\"Setting a route with mux.\"}],[\"code\",{\"code\":\"r := mux.NewRouter()\\nr.HandleFunc(\\\"/\\\", homeHandler)\\nr.HandleFunc(\\\"/about\\\", aboutHandler)\\nr.HandleFunc(\\\"/contact\\\", contactHandler)\\nreturn r\",\"language\":\"go\",\"caption\":\"Example of setting multiple routes.\"}],[\"code\",{\"code\":\"io.WriteString(w, \\\"Hello, world!\\\\n\\\")\",\"language\":\"go\",\"caption\":\"Output a string.\"}],[\"image\",{\"src\":\"https://hackersandslackers-cdn.storage.googleapis.com/2020/05/golang-helloworld.jpg\",\"caption\":\"Our live Go app.\"}],[\"code\",{\"code\":\"func add(x int, y int) int {\\n\\treturn x + y\\n}\",\"language\":\"go\",\"caption\":\"Setting types for incoming function parameters.\"}],[\"code\",{\"code\":\"var x int = 0\",\"language\":\"go\",\"caption\":\"Setting a single integer variable\"}],[\"code\",{\"code\":\"var x, y, z int\",\"language\":\"go\",\"caption\":\"Creating 3 variables each sharing the <code>int</code> type.\"}],[\"code\",{\"code\":\"func main() {\\n    x, y, z := true, false, \\\"no!\\\"\\n}\",\"caption\":\"Implicitly set variable types with the <code>:=</code> operator.\",\"language\":\"go\"}],[\"code\",{\"code\":\"const Website = \\\"hackersandslackers.com\\\"\",\"language\":\"go\"}],[\"bookmark\",{\"type\":\"bookmark\",\"url\":\"https://github.com/hackersandslackers/golang-helloworld\",\"metadata\":{\"url\":\"https://github.com/hackersandslackers/golang-helloworld\",\"title\":\"hackersandslackers/golang-helloworld\",\"description\":\"Create your first ‚ÄúHello world‚Äù app written in Golang. - hackersandslackers/golang-helloworld\",\"author\":\"hackersandslackers\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://repository-images.githubusercontent.com/266418499/e0d3b180-9d17-11ea-91b5-edf572b668c4\",\"icon\":\"https://github.githubassets.com/favicons/favicon.svg\"}}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"http://mypy-lang.org/\"]],[\"a\",[\"href\",\"https://wiki.python.org/moin/GlobalInterpreterLock\"]],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/golang/lint\"]],[\"a\",[\"href\",\"https://tour.golang.org/welcome/1\"]],[\"a\",[\"href\",\"https://github.com/rocketlaunchr/dataframe-go\"]],[\"a\",[\"href\",\"https://github.com/gorilla/mux\"]],[\"a\",[\"href\",\"https://hackersandslackers.app/p/eecb7ecb-860f-4acd-a943-32a0350c6017/github.com/hackersandslackers/golang-helloworld\"]],[\"a\",[\"href\",\"https://twitter.com/ToddRBirchard/status/1088315897847209985\"]],[\"a\",[\"href\",\"https://twitter.com/ToddRBirchard/status/1088682663282642946\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"To be human is to be an unwilling passenger in a winding, aimless journey we call life. Each of us has felt the eternal solidarity of time break apart as we are thrust into existence to navigate the tribulations of existing, left only to wonder what the point of it all is. Just as we become complacent in our respective existential struggles, an event of unspeakable force shakes the foundations of our reality: we fall in love.\"]]],[1,\"p\",[[0,[],0,\"Falling in love is as exhausting as it is enchanting. Our lifespans only have the willing capacity to fall in love a finite number of times, if at all. This realization is responsible for making us wary of falling in love in the first place, as well as zealously defending the love we've found against potential intruders. I'm one to advocate for an opposite conclusion. As difficult, scary, or time-consuming as love may be, I argue that a life that has discovered love on multiple occasions is a life well-lived. If that makes me a \"],[0,[0],1,\"slut\"],[0,[],0,\", so be it: I am a slut for programming languages.\"]]],[1,\"p\",[[0,[],0,\"I've proudly maintained a long-term loving commitment to Python, as well as a complicated affair with JavaScript. Still, even this promiscuous lifestyle can leave one yearning for a kind of love that only a statically-typed language can deliver. As our relationships transition from scripting honeymoons to mature enterprise-level endeavors, it's natural to second-guess our choices. Why endure the overhead of a dynamically typed language when we end up annotating types with \"],[0,[1],1,\"MyPy\"],[0,[],0,\"? Could there be validity in arguments that claim our language of choice is \\\"slow?\\\" And do we really think we can put up with baggage known as the \"],[0,[2],1,\"GIL\"],[0,[],0,\" till death do us part?\"]]],[1,\"p\",[[0,[],0,\"If this all seems like a roundabout way to announce that I've been fooling around with Golang, that's because it absolutely is. I don't suspect that many people are willing or capable of leaving their comfort zones to partake in a journey of this magnitude. For the rest of you, I'd like to welcome you by my side for a short moment in our lives to explore the unexplored. Who knows, perhaps you'll even find love along the way.\"]]],[1,\"h2\",[[0,[],0,\"Installation and Setup\"]]],[1,\"p\",[[0,[],0,\"Installing on OSX is simple thanks to Homebrew:\"]]],[10,0],[1,\"h3\",[[0,[],0,\"GOPATH vs GOROOT\"]]],[1,\"p\",[[0,[],0,\"Installing Golang via Homebrew automatically generates two directories critical to running Go: \"]]],[3,\"ul\",[[[0,[3],1,\"GOROOT \"],[0,[],0,\"( \"],[0,[4],1,\"/usr/local/go\"],[0,[],0,\" ): The Go \\\"root\\\" directory contains Go's source code. Homebrew will automatically register this path for you; there's little reason to mess around in here unless you're a Go contributor or if you're attempting to run multiple versions of Go.\"]],[[0,[3],1,\"GOPATH\"],[0,[],0,\" ( \"],[0,[4],1,\"/Users/toddbirchard/go\"],[0,[],0,\" ): Unlike most programming languages, Go takes an opinionated stance that all projects and dependencies of the language should exist in a single directory known as the \"],[0,[0],1,\"GOPATH\"],[0,[],0,\". Any time we develop a Go project or install a third-party module, the actions taken ultimately happen inside this directory.\"]]]],[1,\"p\",[[0,[],0,\"To make sure OSX recognizes our  \"],[0,[3],1,\"GOPATH\"],[0,[],0,\", we'll have to add it to our shell's startup script. Open your \"],[0,[3],1,\".bashrc\"],[0,[],0,\", \"],[0,[3],1,\".zshrc\"],[0,[],0,\", or whatever it is you use:\"]]],[10,1],[1,\"p\",[[0,[],0,\"We're going to add the \"],[0,[3],1,\"/go\"],[0,[],0,\" base directory, as well as the subdirectory \"],[0,[3],1,\"/go/bin\"],[0,[],0,\":\"]]],[10,2],[1,\"p\",[[0,[],0,\"Save this and reload your shell script:\"]]],[10,3],[1,\"p\",[[0,[],0,\"Let's make sure everything went as planned:\"]]],[10,4],[1,\"p\",[[0,[],0,\"And as a last bit of due diligence, let's confirm that our \"],[0,[3],1,\"GOPATH\"],[0,[],0,\" is being recognized correctly:\"]]],[10,5],[1,\"p\",[[0,[],0,\"As an aside, \"],[0,[4],1,\"go\"],[0,[],0,\" is Golang's CLI which is essential for compiling, formatting, and running Go code, as well as installing \"],[0,[0],1,\"modules \"],[0,[],0,\"(we'll get to those in a sec). Try running \"],[0,[4],1,\"go help\"],[0,[],0,\" to get acquainted.\"]]],[1,\"h2\",[[0,[],0,\"Anatomy of GOPATH\"]]],[1,\"p\",[[0,[],0,\"Golang's \"],[0,[3],1,\"GOPATH\"],[0,[],0,\" is a directory where all your Go code and project dependencies live. The \"],[0,[4],1,\"go\"],[0,[],0,\" CLI actually has a built-in command \"],[0,[4],1,\"$ go help gopath\"],[0,[],0,\" which explains this quite well:\"]]],[1,\"blockquote\",[[0,[],0,\"The Go path is used to resolve import statements.\"],[1,[],0,0],[0,[],0,\"It is implemented by and documented in the go/build package.\"],[1,[],0,1],[0,[],0,\"The GOPATH environment variable lists places to look for Go code.\"]]],[1,\"p\",[[0,[],0,\"Similar to how Python looks for imported libraries in the Python path, Go searches the \"],[0,[3],1,\"GOPATH\"],[0,[],0,\" for the same. A notable difference between Python and Go paths is that Go expects all your Go projects to live within the GOPATH, specifically \"],[0,[3],1,\"/go/src\"],[0,[],0,\". Contrast this with Python where projects can live anywhere.\"]]],[1,\"p\",[[0,[],0,\"The GOPATH directory is made up of 3 subdirectories:\"]]],[10,6],[1,\"p\",[[0,[4],1,\"$ go help gopath\"],[0,[],0,\" explains the purpose of each of these directories.\"]]],[1,\"p\",[[0,[3],1,\"src:\"]]],[1,\"blockquote\",[[0,[],0,\"The src directory holds source code. The path below src determines the import path or executable name.\"]]],[1,\"p\",[[0,[3],1,\"pkg:\"]]],[1,\"blockquote\",[[0,[],0,\"The pkg directory holds installed package objects.\"],[1,[],0,2],[0,[],0,\"As in the Go tree, each target operating system and architecture pair has its own subdirectory of pkg (pkg/GOOS_GOARCH).\"]]],[1,\"p\",[[0,[3],1,\"bin:\"]]],[1,\"blockquote\",[[0,[],0,\"The bin directory holds compiled commands.\"],[1,[],0,3],[0,[],0,\"Each command is named for its source directory, but only the final element, not the entire path.\"]]],[1,\"p\",[[0,[],0,\"In short, your personal source code belongs in \"],[0,[3],1,\"/src\"],[0,[],0,\", installed third-party packages will live in \"],[0,[3],1,\"/pkg\"],[0,[],0,\", and third-party commands which extend the \"],[0,[4],1,\"go\"],[0,[],0,\" CLI will live in \"],[0,[3],1,\"/bin\"],[0,[],0,\". To give an example, here's what my path looks like:\"]]],[10,7],[1,\"p\",[[0,[],0,\"We should be able to break this down quite easily.\"]]],[3,\"ul\",[[[0,[3],0,\"/bin\"],[0,[3],2,\" \"],[0,[],0,\"contains two Go commands I installed previously. \"],[0,[5],1,\"golint\"],[0,[],0,\" is a third-party linter for Go, and \\\"tour\\\" is a local version of the official \"],[0,[6],1,\"Tour of Go\"],[0,[],0,\" walkthrough to help Go newcomers learn their way around the language (I highly recommend completing this, btw).\"]],[[0,[3],1,\"/pkg\"],[0,[],0,\" contains the packages I've installed. Pay special attention to \"],[0,[0],1,\"/pkg/mod\"],[0,[],0,\", where you can see I've installed several packages from Github under the\"],[0,[0],1,\"/github.com\"],[0,[],0,\" directory. These packages include \"],[0,[7],1,\"dataframe-go\"],[0,[],0,\", which is a Go implementation of Pandas-like DataFrames, as well as \"],[0,[8],1,\"mux\"],[0,[],0,\", which is an HTTP router that we're  going to use in our first hello-world project.\"]],[[0,[3],1,\"/src\"],[0,[],0,\" has three projects I've worked on already. \"],[0,[0],1,\"golang-helloworld\"],[0,[],0,\" is the project we're about to create in this tutorial.\"]]]],[1,\"h2\",[[0,[],0,\"Golang Terminology\"]]],[1,\"p\",[[0,[],0,\"Before we get to coding, let's brush up on some basic Go vocabulary:\"]]],[3,\"ul\",[[[0,[3],1,\"Packages\"],[0,[],0,\": Go programs are made up of \\\"packages,\\\" which mirror packaging concepts in other programming languages (think \"],[0,[0],1,\"modules\"],[0,[],0,\" in Python or \"],[0,[0],1,\"packages\"],[0,[],0,\" in Java). Every Golang program contains a package called \"],[0,[3],1,\"main\"],[0,[],0,\", which serves as the project's entry point.\"]],[[0,[3],1,\"Modules\"],[0,[],0,\": Go modules are third-party libraries installed by Go. Modules are essentially projects which have been published for general use as dependencies in your projects.\"]],[[0,[3],1,\"Vendors\"],[0,[],0,\": This is where things get interesting. While modules can be installed to the \"],[0,[0],1,\"/pkg/mod\"],[0,[],0,\" directory for global use, source projects can contain their \"],[0,[0],1,\"own\"],[0,[],0,\" versions of these modules to avoid clashing dependency versions between projects (this is not dissimilar to Python virtual environments). While not required, you can choose to keep module versions project-specific (we will do this in our example).\"]]]],[1,\"h2\",[[0,[],0,\"Creating a Hello World App\"]]],[1,\"p\",[[0,[],0,\"Enough chit-chat, let's make our first Go project. We start with creating our project's directory in the \"],[0,[3],1,\"/go/src\"],[0,[],0,\" directory:\"]]],[10,8],[1,\"p\",[[0,[],0,\"While inside our new project directory, we're now going to initialize our project as a Go \"],[0,[0],1,\"module.\"],[0,[],0,\" This means anybody will be able to install our Go code off Github if they so choose. I know I'm going to save my repo to \"],[0,[9],1,\"github.com/hackersandslackers/golang-helloworld\"],[0,[],0,\", so we run the following:\"]]],[10,9],[1,\"p\",[[0,[],0,\"The moment this is done, a new file will appear in your directory called \"],[0,[3],1,\"go.mod\"],[0,[],0,\". Check out the contents using \"],[0,[4],1,\"$ cat go.mod\"],[0,[],0,\" to see what this initializes with:\"]]],[10,10],[1,\"p\",[[0,[],0,\"Pretty simple stuff so far! \"],[0,[3],1,\"go.mod\"],[0,[],0,\" contains information about our module for others, such as the module name and Go version it is intended for. As we install dependencies for our project, these dependencies and their respective versions will be stored here.\"]]],[1,\"h3\",[[0,[],0,\"main.go\"]]],[1,\"p\",[[0,[],0,\"As mentioned, every Go project's entry point is a file called \"],[0,[3],1,\"main.go\"],[0,[],0,\". We're going to create the most simple \"],[0,[3],1,\"main.go\"],[0,[],0,\" file imaginable: a script which outputs \"],[0,[4],1,\"\\\"Hello, world.\\\"\"],[0,[],0,\":\"]]],[10,11],[1,\"p\",[[0,[],0,\"Now remember: since Go is a compiled language, we need to \"],[0,[0],1,\"build\"],[0,[],0,\" our project before we can run it  üòÆ. I know the extra effort is nearly unbearable, but things are about to pay off as you witness the fruits of your labor:\"]]],[10,12],[1,\"p\",[[0,[0],1,\"WE DID IT!\"],[0,[],0,\" We've just created our first \\\"hello world\\\" app in Go. Your project structure should now look something like this:\"]]],[10,13],[1,\"p\",[[0,[],0,\"The newly created \"],[0,[3],1,\"golang-helloworld\"],[0,[],0,\" file is the compiled executable which is created each time we run \"],[0,[4],1,\"$ go build\"],[0,[],0,\". Each time we make changes to our source code, we should run \"],[0,[4],1,\"$ go build\"],[0,[],0,\" again to rebuild this executable with our changes.\"]]],[1,\"h3\",[[0,[],0,\"Bonus: Code Formatting\"]]],[1,\"p\",[[0,[],0,\"A nifty tool that comes out-of-the-box in Go is a code formatter to clean up any ugly indents and such in your source. Try messing up the indents in \"],[0,[3],1,\"main.go \"],[0,[],0,\"and run the following:\"]]],[10,14],[1,\"p\",[[0,[],0,\"This should fix all the ugly formatting in the file names in outputs, in our case \"],[0,[3],1,\"main.go\"],[0,[],0,\".\"]]],[1,\"h2\",[[0,[],0,\"Create a Web App \"]]],[1,\"p\",[[0,[],0,\"If we were to leave off with a stupid program that prints \"],[0,[4],1,\"\\\"Hello, world!\\\"\"],[0,[],0,\", I'd be doing you a disservice. While we've set up Golang successfully, we haven't learned much about creating anything useful yet. It's time for us to kick things up a notch by making our app a web app which can be served from a browser.\"]]],[1,\"h3\",[[0,[],0,\"Installing our First Dependency\"]]],[1,\"p\",[[0,[],0,\"To serve Go code via a web server, we're going to leverage the highly popular \"],[0,[8],1,\"gorilla/mux\"],[0,[],0,\" module: a lightweight request router and dispatcher for matching incoming requests to their respective handler:\"]]],[10,15],[1,\"p\",[[0,[],0,\"We're going to install this by running \"],[0,[4],1,\"$ go get\"],[0,[],0,\" followed by \"],[0,[4],1,\"$ go install\"],[0,[],0,\":\"]]],[10,16],[1,\"p\",[[0,[4],1,\"go get\"],[0,[],0,\" installs the source for \"],[0,[3],1,\"gorilla/mux\"],[0,[],0,\" to our \"],[0,[3],1,\"/go/bin\"],[0,[],0,\" directory. The \"],[0,[4],1,\"-u\"],[0,[],0,\" flag we pass is an \\\"update\\\" flag, which we use to grab the latest version just in case.\"]]],[1,\"p\",[[0,[],0,\"Let's see how \"],[0,[3],1,\"go.mod\"],[0,[],0,\" was affected by running \"],[0,[4],1,\"$ cat go.mod\"],[0,[],0,\":\"]]],[10,17],[1,\"p\",[[0,[],0,\"As promised, our module dependency has now been added to \"],[0,[3],1,\"go.mod\"],[0,[],0,\" along with the proper version number. Now we can import and use \"],[0,[4],1,\"\\\"github.com/gorilla/mux\\\"\"],[0,[],0,\" to help us build a project!\"]]],[1,\"p\",[[0,[],0,\"We can also use \"],[0,[4],1,\"$ go mod vendor\"],[0,[],0,\" to build this dependency in our \"],[0,[3],1,\"/vendors\"],[0,[],0,\" folder to keep it local to our project.\"]]],[1,\"p\",[[0,[],0,\"Here's a wall of code which turns our \"],[0,[3],1,\"hello world\"],[0,[],0,\" app into a web app:\"]]],[10,18],[1,\"p\",[[0,[],0,\"Our functions are \"],[0,[4],1,\"main()\"],[0,[],0,\", \"],[0,[4],1,\"router()\"],[0,[],0,\", and \"],[0,[4],1,\"handler()\"],[0,[],0,\", which get executed in that order. \"]]],[1,\"h3\",[[0,[],0,\"main()\"]]],[1,\"p\",[[0,[4],1,\"main()\"],[0,[],0,\" sets up an HTTP server to be served locally on port \"],[0,[3],1,\"9100\"],[0,[],0,\", with a couple read & write timeouts set as a form of best practice. Our server doesn't do much on its own without any routes to resolve. That's where our \"],[0,[4],1,\"router()\"],[0,[],0,\" function comes in.\"]]],[1,\"h3\",[[0,[],0,\"router()\"]]],[1,\"p\",[[0,[],0,\"We initialize a \\\"router\\\" by created variable \"],[0,[3],1,\"r\"],[0,[],0,\" with \"],[0,[4],1,\"r := mux.NewRouter()\"],[0,[],0,\". From there we can set as many routes as we'd like with the following syntax:\"]]],[10,19],[1,\"p\",[[0,[4],1,\"HandleFunc()\"],[0,[],0,\" is a built-in method to resolve URL routes. The first parameter is the target URL, and the second is the name of a function to be executed when a user requests said route. We only specify a single route in our example, but we could theoretically set as many as we'd like, for example:\"]]],[10,20],[1,\"h3\",[[0,[],0,\"handler()\"]]],[1,\"p\",[[0,[],0,\"Mux handler functions always accept two parameters by default, which essentially resolve to \"],[0,[3],1,\"output\"],[0,[],0,\" and \"],[0,[3],1,\"input\"],[0,[],0,\". \"],[0,[4],1,\"w http.ResponseWriter\"],[0,[],0,\" expects a parameter named \"],[0,[3],1,\"w\"],[0,[],0,\" with the type \"],[0,[3],1,\"http.ResponseWriter\"],[0,[],0,\", which is what we return to render something for the end-user. \"],[0,[4],1,\"r *http.Request\"],[0,[],0,\" contains information about the user's request, saved to a parameter named \"],[0,[3],1,\"r\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We're keeping things simple(ish) today, so we'll settle for our route to simple output a \\\"hello world\\\" message for our route:\"]]],[10,21],[1,\"p\",[[0,[],0,\"Rebuild and run our project with \"],[0,[4],1,\"$ go build\"],[0,[],0,\" and \"],[0,[4],1,\"$ go run main.go\"],[0,[],0,\". Now try visiting \"],[0,[3],1,\"127.0.0.1:9100\"],[0,[],0,\" in your browser:\"]]],[10,22],[1,\"p\",[[0,[],0,\"And there you have it, lovebirds.\"]]],[1,\"h2\",[[0,[],0,\"Best Practices\"]]],[1,\"p\",[[0,[],0,\"Before I leave to give you and your new favorite Gopher some private time, there's some very low-hanging fruit worth picking in an intro tutorial. This won't last long.\"]]],[1,\"h3\",[[0,[],0,\"\\\"Exported\\\" Functions (AKA: Public Versus Private)\"]]],[1,\"p\",[[0,[],0,\"Nearly every programming language has the concept of \\\"private\\\" versus \\\"public\\\" functions. Go has this concept as well regarding shared functions between packages. Functions that are \\\"shared\\\" are referred to as \\\"exported functions\\\" (sup JavaScript).\"]]],[1,\"p\",[[0,[],0,\"A name is exported if it begins with a capital letter. Our \"],[0,[3],1,\"hello world\"],[0,[],0,\" example consisted solely of private functions (which makes sense, as we only had a single package). If we wanted to make our \"],[0,[4],1,\"router()\"],[0,[],0,\" function accessible by other packages, we'd simply need to rename this to \"],[0,[4],1,\"Router()\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Type Declaration\"]]],[1,\"p\",[[0,[],0,\"Go expects that \"],[0,[3],1,\"variables\"],[0,[],0,\", incoming function \"],[0,[3],1,\"parameters\"],[0,[],0,\", and \"],[0,[3],1,\"function return values\"],[0,[],0,\" to have declared types. In the below example, the function \"],[0,[4],1,\"add()\"],[0,[],0,\" accepts two integers and adds them, which undoubtedly results in an integer:\"]]],[10,23],[1,\"p\",[[0,[],0,\"Variables are set using the same syntax as function parameters, with the variable name coming first:\"]]],[10,24],[1,\"p\",[[0,[],0,\"There's also a shorthand way of setting multiple variables of the same type by separating variable names by commas. In this case, variables \"],[0,[4],1,\"x\"],[0,[],0,\", \"],[0,[4],1,\"y\"],[0,[],0,\", and \"],[0,[4],1,\"z\"],[0,[],0,\" are set as integers with no assigned values:\"]]],[10,25],[1,\"h3\",[[0,[],0,\"Short Assignment Statements\"]]],[1,\"p\",[[0,[],0,\"A very cool feature of Go is the \"],[0,[4],1,\":=\"],[0,[],0,\" operator. The \\\"short assignment\\\" operator can be used to set multiple variables at once \"],[0,[0],1,\"with implicit types\"],[0,[],0,\". That means Go will resolve the type of each variable on its own based on the value assigned without the need for explicit type declaration. The below example creates three variables, where \"],[0,[4],1,\"x\"],[0,[],0,\" and \"],[0,[4],1,\"y\"],[0,[],0,\" are resolved as booleans, and \"],[0,[4],1,\"z\"],[0,[],0,\" is resolved as a string:\"]]],[10,26],[1,\"h3\",[[0,[],0,\"Constants\"]]],[1,\"p\",[[0,[],0,\"The last noteworthy nugget is the presence of \"],[0,[3],1,\"constants\"],[0,[],0,\" in Go. While there's nothing unique about Go supporting constants, it's a breath of fresh air for Pythonistas who may be nostalgic about having the ability to do the following:\"]]],[10,27],[1,\"h2\",[[0,[],0,\"Happily Ever After?\"]]],[1,\"p\",[[0,[],0,\"Whether or not you hop on the Go train is a question of where your heart lies. While I'll continue using Python for the majority of what I do, it's nice to leave the Mrs. at home once in a while \"],[0,[0],1,\"(inb4 this misogynistic analogy ruins me)\"],[0,[],0,\" to fool around building quick endpoints in a statically-typed language \"],[0,[0],1,\"which isn't Java\"],[0,[],0,\". Have I ever mentioned how much \"],[0,[10],1,\"I hate Oracle\"],[0,[],0,\"? Like, how much I \"],[0,[11,0],1,\"really\"],[0,[],1,\" hate them\"],[0,[],0,\"? No? Perhaps another time.\"]]],[1,\"p\",[[0,[],0,\"Anyway, get on with it then. The repository for what we've created today is up on Github here:\"]]],[10,28],[1,\"p\",[]]]}",
            "comment_id": "5ec5ea6f336dbc09ef26dca8",
            "feature_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/05/golang-gettingstarted.jpg",
            "featured": false,
            "status": "published",
            "visibility": "public",
            "created_at": "2020-05-21T02:41:51.000Z",
            "updated_at": "2020-05-26T05:44:25.000Z",
            "published_at": "2020-05-25T12:00:00.000Z",
            "custom_excerpt": "Set up Golang on your local environment and create your first \"Hello world\" app.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "send_email_when_published": false,
            "tags": [
                {
                    "id": "5ec5eb0d336dbc09ef26dcb0",
                    "name": "Golang",
                    "slug": "golang",
                    "description": "Create apps, build APIs, or author data science notebooks using Golang: Google's foray into improving the usability of statically-typed languages.",
                    "feature_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/05/golang.png",
                    "visibility": "public",
                    "meta_title": "Golang",
                    "meta_description": "Create apps, build APIs, or author data science notebooks using Golang: Google's foray into improving the usability of statically-typed languages.",
                    "created_at": "2020-05-21T02:44:29.000Z",
                    "updated_at": "2020-05-25T22:31:50.000Z",
                    "url": "https://hackersandslackers.app/tag/golang/"
                },
                {
                    "id": "5dc42cb712c9ce0d63f5bf71",
                    "name": "Software Development",
                    "slug": "software-development",
                    "description": "General software development principals and tools. Receive insights applicable to building any application.",
                    "feature_image": null,
                    "visibility": "public",
                    "meta_title": "Software Development",
                    "meta_description": "General software development principals and tools. Receive insights applicable to building any application.",
                    "created_at": "2018-11-05T13:30:12.000Z",
                    "updated_at": "2019-01-26T11:38:11.000Z",
                    "url": "https://hackersandslackers.app/tag/software-development/"
                }
            ],
            "authors": [
                {
                    "id": "1",
                    "name": "Todd Birchard",
                    "slug": "todd",
                    "email": "todd@hackersandslackers.com",
                    "profile_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/04/todd@2x.jpg",
                    "cover_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg",
                    "bio": "Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.",
                    "website": "https://toddbirchard.com",
                    "location": "New York City",
                    "facebook": null,
                    "twitter": "@ToddRBirchard",
                    "accessibility": "{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd's Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":true}}}",
                    "status": "active",
                    "meta_title": null,
                    "meta_description": null,
                    "tour": "[\"upload-a-theme\",\"getting-started\"]",
                    "last_seen": "2020-06-07T17:08:46.000Z",
                    "created_at": "2019-11-07T14:38:35.000Z",
                    "updated_at": "2020-06-07T17:08:46.000Z",
                    "roles": [
                        {
                            "id": "5dc42c6b4b25bc0d1367444c",
                            "name": "Owner",
                            "description": "Blog Owner",
                            "created_at": "2019-11-07T14:38:35.000Z",
                            "updated_at": "2019-11-07T14:38:35.000Z"
                        }
                    ],
                    "url": "https://hackersandslackers.app/author/todd/"
                }
            ],
            "primary_author": {
                "id": "1",
                "name": "Todd Birchard",
                "slug": "todd",
                "email": "todd@hackersandslackers.com",
                "profile_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/04/todd@2x.jpg",
                "cover_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg",
                "bio": "Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.",
                "website": "https://toddbirchard.com",
                "location": "New York City",
                "facebook": null,
                "twitter": "@ToddRBirchard",
                "accessibility": "{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd's Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":true}}}",
                "status": "active",
                "meta_title": null,
                "meta_description": null,
                "tour": "[\"upload-a-theme\",\"getting-started\"]",
                "last_seen": "2020-06-07T17:08:46.000Z",
                "created_at": "2019-11-07T14:38:35.000Z",
                "updated_at": "2020-06-07T17:08:46.000Z",
                "roles": [
                    {
                        "id": "5dc42c6b4b25bc0d1367444c",
                        "name": "Owner",
                        "description": "Blog Owner",
                        "created_at": "2019-11-07T14:38:35.000Z",
                        "updated_at": "2019-11-07T14:38:35.000Z"
                    }
                ],
                "url": "https://hackersandslackers.app/author/todd/"
            },
            "primary_tag": {
                "id": "5ec5eb0d336dbc09ef26dcb0",
                "name": "Golang",
                "slug": "golang",
                "description": "Create apps, build APIs, or author data science notebooks using Golang: Google's foray into improving the usability of statically-typed languages.",
                "feature_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/05/golang.png",
                "visibility": "public",
                "meta_title": "Golang",
                "meta_description": "Create apps, build APIs, or author data science notebooks using Golang: Google's foray into improving the usability of statically-typed languages.",
                "created_at": "2020-05-21T02:44:29.000Z",
                "updated_at": "2020-05-25T22:31:50.000Z",
                "url": "https://hackersandslackers.app/tag/golang/"
            },
            "url": "https://hackersandslackers.app/create-your-first-golang-app/",
            "excerpt": "Set up Golang on your local environment and create your first \"Hello world\" app.",
            "email": null,
            "og_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/05/golang-gettingstarted-2.jpg",
            "og_title": "Create Your First Golang App",
            "og_description": "Set up Golang on your local environment and create your first \"Hello world\" app.",
            "twitter_image": "https://hackersandslackers-cdn.storage.googleapis.com/2020/05/golang-gettingstarted-1.jpg",
            "twitter_title": "Create Your First Golang App",
            "twitter_description": "Set up Golang on your local environment and create your first \"Hello world\" app.",
            "meta_title": "Create Your First Golang App",
            "meta_description": "Set up Golang on your local environment and create your first \"Hello world\" app.",
            "email_subject": null
        }
    ]
}