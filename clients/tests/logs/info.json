{"time": "11/17/2020, 16:23:03", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:23:04", "message": "Successfully sent email to todd@hackersandslackers.com with subject Loser commented on The Hostile Extraction of Tableau Server Data", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/17/2020, 16:25:41", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:25:41", "message": "Successfully sent email to todd@hackersandslackers.com with subject Loser commented on `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/17/2020, 16:25:41", "message": "<Response [401]>", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/17/2020, 16:27:19", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:27:19", "message": "Successfully sent email to todd@hackersandslackers.com with subject Loser commented on `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/17/2020, 16:27:19", "message": "<Response [401]>", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/17/2020, 16:28:42", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:29:34", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:29:52", "message": "Successfully sent email to todd@hackersandslackers.com with subject Loser commented on `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/17/2020, 16:29:58", "message": "<Response [200]>", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/17/2020, 16:35:36", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:35:37", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/17/2020, 16:35:37", "message": "<Response [200]>", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/17/2020, 16:37:16", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/17/2020, 16:37:17", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/17/2020, 16:37:17", "message": "<Response [200]>", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/18/2020, 15:27:49", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/18/2020, 15:27:50", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/18/2020, 15:27:50", "message": "{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-18T20:21:11.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-18T20:21:11.000Z', 'url': 'https://hackersandslackers.app/author/todd/'} received comment notification email.", "level": "SUCCESS", "function": "send_comment_notification_email", "module": "clients.mail"},
{"time": "11/18/2020, 15:27:50", "message": "None", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/18/2020, 20:09:22", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/18/2020, 20:09:23", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/18/2020, 20:09:23", "message": "{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-18T20:21:11.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-18T20:21:11.000Z', 'url': 'https://hackersandslackers.app/author/todd/'} received comment notification email.", "level": "SUCCESS", "function": "send_comment_notification_email", "module": "clients.mail"},
{"time": "11/18/2020, 20:09:23", "message": "None", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/18/2020, 20:10:12", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/18/2020, 20:10:30", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/18/2020, 20:10:30", "message": "{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-18T20:21:11.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-18T20:21:11.000Z', 'url': 'https://hackersandslackers.app/author/todd/'} received comment notification email.", "level": "SUCCESS", "function": "send_comment_notification_email", "module": "clients.mail"},
{"time": "11/18/2020, 20:10:30", "message": "None", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
{"time": "11/19/2020, 01:01:11", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 01:01:12", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/19/2020, 01:01:12", "message": "{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T05:59:22.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T05:59:22.000Z', 'url': 'https://hackersandslackers.app/author/todd/'} received comment notification email.", "level": "SUCCESS", "function": "send_comment_notification_email", "module": "clients.mail"},
{"time": "11/19/2020, 01:02:12", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 01:02:13", "message": "Successfully sent email to todd@hackersandslackers.com with subject Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data`", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/19/2020, 01:02:13", "message": "{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T05:59:22.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T05:59:22.000Z', 'url': 'https://hackersandslackers.app/author/todd/'} received comment notification email.", "level": "SUCCESS", "function": "send_comment_notification_email", "module": "clients.mail"},
{"time": "11/19/2020, 01:09:21", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 01:09:21", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/19/2020, 01:13:22", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 01:13:30", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 01:13:33", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 01:13:35", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/19/2020, 01:13:53", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 15:08:51", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 15:08:51", "message": "https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5bf92", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:08:51", "message": "{'posts': [{'id': '5dc42cb812c9ce0d63f5bf92', 'uuid': '77609409-5552-418d-b742-c549a2ccf01b', 'title': 'Getting Started with Django', 'slug': 'getting-started-django', 'mobiledoc': '{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://res-4.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/11/django-popularity.jpg\",\"caption\":\"General in MVC frameworks over 6 years.\"}],[\"html\",{\"html\":\"<div class=\\\\\"subtext\\\\\">\\\\n* This is a meaningless claim. Nothing we\u2019ll cover has changed from Django 2.x, but claiming this achievement makes my life appear less meaningless.\\\\n</div>\"}],[\"code\",{\"code\":\"# Create virtual environment\\\\n$ python3.8 -m venv .venv\\\\n\\\\n# Activate virtual environment\\\\n$ . .venv/bin/activate\\\\n\\\\n# Install django in virtual environment\\\\n$ pip install django    \",\"language\":\"shell\"}],[\"code\",{\"code\":\"$ python3 -m django --version\\\\n>> 3.0\",\"language\":\"shell\",\"caption\":\"Check your version of Django\"}],[\"code\",{\"code\":\"$ django-admin startproject [YOUR_PROJECT_NAME]\",\"language\":\"shell\",\"caption\":\"Start a new Django project\"}],[\"code\",{\"code\":\"/djangotutorial\\\\n  \u251c\u2500\u2500 /djangotutorial\\\\n  \u2502   \u251c\u2500\u2500 __init__.py\\\\n  \u2502   \u251c\u2500\u2500 settings.py\\\\n  \u2502   \u251c\u2500\u2500 urls.py\\\\n  \u2502   \u2514\u2500\u2500 wsgi.py\\\\n  \u2514\u2500\u2500 manage.py\",\"language\":\"shell\",\"caption\":\"File structure of our new app\"}],[\"image\",{\"caption\":\"Example Django project structure.\",\"src\":\"https://res-4.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django-project.png\"}],[\"code\",{\"code\":\"$ python3 manage.py runserver\\\\n\\\\nWatching for file changes with StatReloader\\\\nPerforming system checks...\\\\n\\\\nSystem check identified no issues (0 silenced).\\\\nDecember 04, 2019 - 23:18:54\\\\nDjango version 3.0, using settings \\'djangotutorial.settings\\'\\\\nStarting development server at http://127.0.0.1:8000/\\\\nQuit the server with CONTROL-C.\\\\n\",\"language\":\"shell\",\"caption\":\"Output of running Django\\'s \\\\\"development\\\\\" server\"}],[\"image\",{\"src\":\"https://res-1.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django_helloworld_runserver.png\",\"caption\":\"Django\\'s installation confirmation screen\"}],[\"code\",{\"code\":\"import os\\\\n\\\\n# SECURITY WARNING: keep the secret key used in production secret!\\\\nSECRET_KEY = \\'$HVG687rTFDuYdtfg8yiuf87fuib&)lw#6btg5_p\\'\\\\n\\\\n# SECURITY WARNING: don\\'t run with debug turned on in production!\\\\nDEBUG = True\\\\n\\\\nALLOWED_HOSTS = []\\\\n\\\\n# Application definition\\\\nINSTALLED_APPS = [\\\\n    \\'django.contrib.admin\\',\\\\n    \\'django.contrib.auth\\',\\\\n    \\'django.contrib.contenttypes\\',\\\\n    \\'django.contrib.sessions\\',\\\\n    \\'django.contrib.messages\\',\\\\n    \\'django.contrib.staticfiles\\',\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"ALLOWED_HOSTS = [\\\\n    \\'0.0.0.0\\',\\\\n    \\'127.0.0.1\\',\\\\n    \\'localhost\\',\\\\n    \\'127.0.0.1:8000\\'\\\\n]\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"ALLOWED_HOSTS = [\\\\n    \\'0.0.0.0\\',\\\\n    \\'127.0.0.1\\',\\\\n    \\'localhost\\',\\\\n    \\'127.0.0.1:8000\\',\\\\n    \\'example.com\\'\\\\n ]\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Database\\\\nDATABASES = {\\\\n    \\'default\\': {\\\\n        \\'ENGINE\\': \\'django.db.backends.sqlite3\\',\\\\n        \\'NAME\\': os.path.join(BASE_DIR, \\'db.sqlite3\\'),\\\\n    }\\\\n}\\\\n\\\\n...\",\"language\":\"python\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Database\\\\nDATABASES = {\\\\n    \\'default\\': {\\\\n        \\'ENGINE\\': \\'django.db.backends.mysql\\',\\\\n        \\'NAME\\': \\'myDatabase\\',\\\\n        \\'USER\\': \\'root\\',\\\\n        \\'PASSWORD\\': \\'password123\\',\\\\n        \\'HOST\\': \\'534.13.356.35\\',\\\\n        \\'PORT\\': \\'3306\\',\\\\n    }\\\\n}\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"$ pip3 install mysqlclient\",\"language\":\"python\",\"caption\":\"Install a Python library to connect to MySQL\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Logging\\\\nLOGGING = {\\\\n    \\'version\\': 1,\\\\n    \\'disable_existing_loggers\\': False,\\\\n    \\'handlers\\': {\\\\n        \\'file\\': {\\\\n            \\'level\\': \\'DEBUG\\',\\\\n            \\'class\\': \\'logging.FileHandler\\',\\\\n            \\'filename\\': \\'logs/debug.log\\',\\\\n        },\\\\n    },\\\\n    \\'loggers\\': {\\\\n        \\'django\\': {\\\\n            \\'handlers\\': [\\'file\\'],\\\\n            \\'level\\': \\'DEBUG\\',\\\\n            \\'propagate\\': True,\\\\n        },\\\\n    },\\\\n}\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Static files (CSS, JavaScript, Images)\\\\nSTATIC_URL = \\'/static/\\'\\\\nSTATICFILES_DIRS = [\\\\n    os.path.join(PROJECT_DIR, \\\\\"static\\\\\")\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"APPEND_SLASH = True\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"{% load static %}\\\\n\\\\n<!DOCTYPE html>\\\\n<html lang=\\\\\"en\\\\\">\\\\n\\\\n<head>\\\\n<title>{{title}}</title>\\\\n  <meta charset=\\\\\"utf-8\\\\\" />\\\\n  <meta name=\\\\\"description\\\\\" content=\\\\\"This is a description\\\\\">\\\\n  <meta name=\\\\\"HandheldFriendly\\\\\" content=\\\\\"True\\\\\" />\\\\n  <meta name=\\\\\"viewport\\\\\" content=\\\\\"width=device-width, initial-scale=1.0, viewport-fit=cover\\\\\" />\\\\n  <meta name=\\\\\"theme-color\\\\\" content=\\\\\"#5eb9d7\\\\\">\\\\n  <link rel=\\\\\"apple-touch-icon\\\\\" href=\\\\\"icon.png\\\\\">\\\\n  <link rel=\\\\\"stylesheet\\\\\" href=\\\\\"https://use.typekit.net/uqq2lcv.css\\\\\">\\\\n  <link href=\\\\\"{% static \\'css/styles.css\\' %}\\\\\" rel=\\\\\"stylesheet\\\\\" type=\\\\\"text/css\\\\\">\\\\n</head>\\\\n\\\\n<body class=\\\\\"{{template}}\\\\\">\\\\n    {% block content %}{%  endblock %}\\\\n</body>\\\\n\\\\n</html>\\\\n\",\"language\":\"jinja2\",\"caption\":\"layout.html\"}],[\"code\",{\"code\":\"/djangotutorial\\\\n\u251c\u2500\u2500 /static\\\\n\u2502   \u251c\u2500\u2500 /css\\\\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\\\\n\u2502   \u2514\u2500\u2500 /img\\\\n\u2502       \u2514\u2500\u2500 logo.png\\\\n\u251c\u2500\u2500 /templates\\\\n\u2502   \u2514\u2500\u2500 layout.html\\\\n\u251c\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 settings.py\\\\n\u251c\u2500\u2500 urls.py\\\\n\u2514\u2500\u2500 wsgi.py\",\"language\":\"shell\",\"caption\":\"<code>/djangotutorial</code> directory\"}],[\"code\",{\"code\":\"$ django-admin startapp [YOUR_APP_NAME]\",\"language\":\"shell\",\"caption\":\"Create a Django \\\\\"app\\\\\"\"}],[\"code\",{\"code\":\"/myapp\\\\n  \u251c\u2500\u2500 __init__.py\\\\n  \u251c\u2500\u2500 admin.py\\\\n  \u251c\u2500\u2500 apps.py\\\\n  \u251c\u2500\u2500 /migrations\\\\n  \u2502   \u2514\u2500\u2500 __init__.py\\\\n  \u251c\u2500\u2500 models.py\\\\n  \u251c\u2500\u2500 tests.py\\\\n  \u2514\u2500\u2500 views.py\",\"language\":\"shell\",\"caption\":\"Basic structure of a Django \\\\\"app\\\\\"\"}],[\"code\",{\"code\":\"from django.shortcuts import render\\\\n\\\\n\\\\ndef index(request):\\\\n    context = {\\\\n        \\'template\\': \\'homepage\\',\\\\n        \\'title\\': \\'My Django App\\',\\\\n        \\'description\\': \\'You\\\\\\\\\\'ve launched your first Django app!\\'\\\\n    }\\\\n    return render(request, \\'myapp/index.html\\', context)\",\"language\":\"python\",\"caption\":\"views.py\"}],[\"code\",{\"code\":\"/myapp\\\\n\u251c\u2500\u2500 /templates\\\\n\u2502\\xa0\\xa0 \u2514\u2500\u2500 /myapp\\\\n\u2502\\xa0\\xa0     \u2514\u2500\u2500 index.html\\\\n\u251c\u2500\u2500 /migrations\\\\n\u2502\\xa0\\xa0 \u2514\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 admin.py\\\\n\u251c\u2500\u2500 apps.py\\\\n\u251c\u2500\u2500 models.py\\\\n\u251c\u2500\u2500 tests.py\\\\n\u2514\u2500\u2500 views.py\",\"language\":\"shell\",\"caption\":\"Django app containing page templates\"}],[\"code\",{\"code\":\"{% extends \\'layout.html\\' %}\\\\n{% load static %}\\\\n\\\\n{% block content %}\\\\n    <div class=\\\\\"card\\\\\">\\\\n        <img src=\\\\\"{% static \\'img/logo.png\\' %}\\\\\" alt=\\\\\"logo\\\\\" class=\\\\\"logo\\\\\" />\\\\n        <h1>Hello world!</h1>\\\\n        <p>{{ description }}</p>\\\\n    </div>\\\\n{%  endblock %}\\\\n\",\"language\":\"jinja2\",\"caption\":\"index.html\"}],[\"code\",{\"code\":\"from django.urls import path\\\\n\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path(\\'\\', views.index, name=\\'index\\'),\\\\n]\",\"language\":\"python\",\"caption\":\"urls.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\nurlpatterns = [\\\\n    path(\\'\\', views.index, name=\\'index\\'),\\\\n    path(r\\'^home/$\\', views.index, name=\\'index\\'),\\\\n    path(r\\'^home/(?P<user>\\\\\\\\w+)$\\', views.index, name=\\'index\\'),\\\\n]\",\"caption\":\"urls.py\",\"language\":\"python\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Application definition\\\\nINSTALLED_APPS = [\\\\n    \\'django.contrib.admin\\',\\\\n    \\'django.contrib.auth\\',\\\\n    \\'django.contrib.contenttypes\\',\\\\n    \\'django.contrib.sessions\\',\\\\n    \\'django.contrib.messages\\',\\\\n    \\'django.contrib.staticfiles\\',\\\\n    \\'myapp\\',\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"from django.contrib import admin\\\\nfrom django.urls import path, include\\\\n\\\\nurlpatterns = [\\\\n    path(\\'admin/\\', admin.site.urls),\\\\n    path(\\'\\', include(\\'myapp.urls\\')),\\\\n]\\\\n\",\"language\":\"python\",\"caption\":\"djangotutorial/urls.py\"}],[\"image\",{\"src\":\"https://res-5.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django-homepage.png\",\"caption\":\"Our live homepage served by Django.\"}],[\"bookmark\",{\"type\":\"bookmark\",\"url\":\"https://github.com/hackersandslackers/django-intro-tutorial\",\"metadata\":{\"url\":\"https://github.com/hackersandslackers/django-intro-tutorial\",\"title\":\"hackersandslackers/django-intro-tutorial\",\"description\":\"\ud83d\ude80\u2705 Get started with Django by building your first web app. - hackersandslackers/django-intro-tutorial\",\"author\":\"hackersandslackers\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://repository-images.githubusercontent.com/225977066/21fbe900-1719-11ea-90cc-536b180a5e0d\",\"icon\":\"https://github.githubassets.com/favicon.ico\"}}]],\"markups\":[[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Adrian_Holovaty\"]],[\"a\",[\"href\",\"https://jacobian.org/\"]],[\"strong\"],[\"em\"],[\"code\"],[\"a\",[\"href\",\"https://hackersandslackers.app/pipenv-python-environment-management/\"]],[\"a\",[\"href\",\"https://docs.djangoproject.com/en/2.2/ref/django-admin/\"]],[\"a\",[\"href\",\"http://127.0.0.1:8000/\"]],[\"a\",[\"href\",\"https://docs.djangoproject.com/en/2.2/ref/settings/#databases\"]],[\"a\",[\"href\",\"https://hackersandslackers.app/flask-page-templates-jinja/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"There isn\\'t much I can say that hasn\\'t already been said about Django: the granddaddy of all web frameworks. I owe a large part of my engineering career to learning Django on a whim in 2012. Django was a surprisingly elegant take on MVC, written in a programming language that was far from mainstream at the time of Django\\'s inception. Most of us have surely forgotten what it was like to learn 1) programming language, 2) a framework, and 3) an entire programming paradigm, all at the same time. In the face of that challenge, \"],[0,[0],1,\"Adrian Holovaty\"],[0,[],0,\" and \"],[0,[1],1,\"Jacob Kaplan-moss\"],[0,[],0,\" produced a phenomenal book dubbed \"],[0,[2],1,\"The Definitive Guide To Django\"],[0,[],0,\", which artfully articulated all of those things simultaneously. I believe the book is now either free or serves as Django\\'s official documentation. Without those who created Django and championed its mainstream popularity, our website of sloppy Python tutorials surely would not exist today.\"]]],[1,\"p\",[[0,[],0,\"To say a lot has happened since 2012 would be the understatement of the decade. Staying within the topic of software, some might remember the prophecy of \"],[0,[2],1,\"Ruby on Rails\"],[0,[],0,\" eating the world. It was a popular sentiment which coincidentally took rise while Guido Von Rossen \"],[0,[3],1,\"enraged\"],[0,[],0,\" the Python community with the announcement of \"],[0,[2],1,\"Python 3 \"],[0,[],0,\"(which was, for the record, a completely necessary and reasonable course of action). My condolences to the families of developers lost to traumatic finger injuries, as they were forced to rewrite their \"],[0,[4],1,\"print\"],[0,[],0,\" statements to include parenthesis. Pessimistic commentary surrounding the future of Python (and Django) was everywhere- even our elitist Hacker News overlords couldn\\'t help themselves from the phrase \u201cPython is dead\u201d (which I wholeheartedly hope somebody takes the time to create a meme collection of). It was a comedy of short-sighted hyperbole, or in other words, typical software engineer banter. That\\'s around the time when \"],[0,[2],1,\"#TeamRuby\"],[0,[],0,\" collapsed harder than the Soviet Union. The timing of new NodeJS frameworks served as safe-havens for refugees: lucky JavaScript developers now have an infinite supply of soon-to-be-obsolete frameworks to spend the rest of their lives with.\"]]],[1,\"p\",[[0,[],0,\"So why start writing Django tutorials \"],[0,[3],1,\"now?\"],[0,[],0,\" I\\'ve had a very public and notorious love affair with Flask for well over a year now... how does Django fit into this love triangle? Is this considered cheating?\"]]],[1,\"p\",[[0,[],0,\"Let\\'s consider the top complaints developers have about their profession. Perhaps the most common (and painfully cliche) complaint is that software professionals are pressured to learn \\\\\"countless frameworks\\\\\" to stay relevant in the industry. That surely feels like an unfortunate fate when compared to the non-technical office worker, who has learned exactly zero frameworks. Is there legitimacy to this complaint? Well, let\\'s start by looking at how a sample of how MVC frameworks have fared over the past six years:\"]]],[10,0],[1,\"p\",[[0,[],0,\"Google search trends aren\\'t flawlessly scientific, but it\\'s hard to deny Django\\'s resilient popularity. Django is the only example in this sample which is highly relevant in \"],[0,[3],1,\"both\"],[0,[],0,\" 2013 and 2019, and actually \"],[0,[3],1,\"gains\"],[0,[],0,\" interest over time to steal the #1 most Googled MVC framework in 2019. Different surveys will tell narratives, but there\\'s an undeniable truth worth recognizing: if a software developer spent their entire career developing exclusively in Django, they could comfortably retire from a successful career having learned only a single framework. In fact, \"],[0,[3],1,\"any\"],[0,[],0,\" of us could have chosen to do so, and still can. The mystery of human nature instead leads down self-destructive paths, hurting ourselves with diseases like Angular, or even worse, ASP.NET.\"]]],[1,\"p\",[[0,[],0,\"Anyway, welcome to Django 101. This post is the first in a series where we dissect Django from top-to-bottom for people in 2019. If you\\'ve ever felt the hopeless feeling that the world has an unfair 10-year head start doing something you love, this series is for you. Welcome to the family.\"]]],[1,\"h3\",[[0,[],0,\"A Note About Django Vs Flask\"]]],[1,\"p\",[[0,[],0,\"This comparison is bound to pop up, so let\u2019s get it out of the way.\"]]],[1,\"p\",[[0,[2],1,\"Flask\u2019s\"],[0,[],0,\" claim to fame is its zero-configuration quick-start, which contains seven lines of code and exactly zero bells-and-whistles. Flask prioritizes ease-of-entry over features, where \u201cfeatures\u201d are plugins (AKA Flask-specific Python libraries).\"]]],[1,\"p\",[[0,[2],1,\"Django\"],[0,[],0,\" is the antithesis to Flask\u2019s \u201cas-you-go\u201d philosophy of development. Batteries are included with Django to the extent where Django\u2019s batteries have batteries of their own. No amount of imagination could fathom a paradigm that Django doesn\\'t handle out of the box.\"]]],[1,\"p\",[[0,[],0,\"Flask is akin to the lean startup advocating agile, whereas Django is equivalent to an Enterprise behemoth in denial about using waterfall (this analogy is also a pretty accurate manifestation of who-uses-what). I\u2019ve found Flask to have a much easier learning curve, partially because Flask is \"],[0,[3],1,\"far less\"],[0,[],0,\" rigid than Django. Flask projects inherently have no sense of structure, whereas Django \"],[0,[3],1,\"forces\"],[0,[],0,\" developers into an organized paradigm. Flask projects have the ability to be structured similarly to Django, but cohesiveness becomes highly unlikely as your development team approaches hundreds of devs. This reason alone enough to perpetuate an assumption you probably already have: \u201cDjango for large projects, Flask for small projects.\u201d I\u2019m not suggesting this is entirely accurate, but it isn\u2019t \"],[0,[3],1,\"inaccurate\"],[0,[],0,\"  either.\"]]],[1,\"h2\",[[0,[],0,\"Getting Started\"]]],[1,\"p\",[[0,[],0,\"The goal of this tutorial is to create the simplest  possible Django application that provides \"],[0,[3],1,\"some sort of value\"],[0,[],0,\". Learning to print \u201cHello world\u201d is fine, but it\u2019s kind of a useless exercise in terms of learning the internals of a Framework. We\u2019ll instead focus on building an application that serves a single HTML page. It doesn\\'t sound like much, but you should walk away with a grasp of:\"]]],[3,\"ul\",[[[0,[],0,\"Installing and running Django locally\"]],[[0,[],0,\"Configuring Django settings properly\"]],[[0,[],0,\"Creating and managing \u201capp\u201d modules\"]],[[0,[],0,\"Serving templates via Django\u2019s native templating system\"]],[[0,[],0,\"Styling templates with static assets\"]],[[0,[],0,\"Routing in Django\"]]]],[1,\"p\",[[0,[],0,\"To make things interesting, I\u2019ll be walking through this with Django 3.0, which was actually released two days ago. You could very well be reading the first Django 3 tutorial ever written*.*\"]]],[1,\"p\",[[0,[],0,\"We\u2019re going to be running Django locally for the purpose of this tutorial. If you\u2019re looking for details to set up Django on Ubuntu, I\\'d start \"],[0,[2],1,\"here.\"]]],[10,1],[1,\"h3\",[[0,[],0,\"Installing Django in a Virtual Environment\"]]],[1,\"p\",[[0,[],0,\"As always, we want to set up a virtual environment for our project before installing Python packages. Feel free to use whichever Python virtual environment you\\'re comfortable with; I\\'m personally going to use \"],[0,[5],1,\"Pipenv\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[4],1,\"cd\"],[0,[],0,\" into the directory you\\'d like to start your app in and create your virtual environment:\"]]],[10,2],[1,\"p\",[[0,[],0,\"Now we have an active virtual environment with Django installed. Just to make sure everything is fine, run the following line to check the proper version of Django was installed:\"]]],[10,3],[1,\"p\",[[0,[],0,\"We\\'re ready to rock. Lucky for us, Django has a built-in command called \"],[0,[4],1,\"django-admin\"],[0,[],0,\" to help us generate our first project (amongst other things we\\'ll explore later). To generate the scaffolding for our project, we invoke one of \"],[0,[4],1,\"django-admin\"],[0,[],0,\"\\'s methods called \"],[0,[4],1,\"startproject\"],[0,[],0,\":\"]]],[10,4],[1,\"p\",[[0,[],0,\"Boom, we just started our first project! My project happens to be called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\". Let\\'s see what\\'s inside.\"]]],[1,\"h2\",[[0,[],0,\"Anatomy of a Django App\"]]],[1,\"p\",[[0,[],0,\"The first key to understanding Django is understanding the pieces that make it work. Here are the \\\\\"pieces\\\\\" we created by starting our project:\"]]],[10,5],[1,\"p\",[[0,[],0,\"Our new project contains one \"],[0,[3],1,\"file\"],[0,[],0,\" and one \"],[0,[3],1,\"directory\"],[0,[],0,\". We\\'ll touch on what purpose \"],[0,[2],1,\"manage.py\"],[0,[],0,\" serves in a moment, but let\\'s first address the glaring question: is why there a folder called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" in our project called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\"? It\u2019s as though we just started a band called Iron Maiden, created a song named Iron Maiden, and featured it on our new album: Iron Maiden. It seems strange, but this begins to make sense as we unravel how Django apps scale.\"]]],[1,\"p\",[[0,[],0,\"Django projects are designed to be large by design: a single Django project is intended to consist of modules, or as Django calls them, \u201capps\u201d. Let\u2019s see what a mature Django project with multiple \u201capps\u201d might look like:\"]]],[10,6],[1,\"p\",[[0,[],0,\"It\u2019s best to think of a Django \\\\\"app\u201d as a subsection of your project that serves a general purpose. Think along the lines of a checkout flow for an e-commerce site, or logged-in user profiles: both of those examples would probably consist of multiple pages, but share common logic and assets between those pages.\"]]],[1,\"p\",[[0,[],0,\"One of our apps always shares the name of the parent project. This app contains the \u201ccore\u201d of our project: it serves as the entry point, which ties our other apps together and holds settings common to all of our apps, such as database information. It would be fairly accurate to state Django projects are a collection of app \u201cnodes,\u201d where \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" is our \u201cmaster node.\u201d Here\\'s what\\'s inside:\"]]],[3,\"ul\",[[[0,[2],1,\"settings.py \"],[0,[],0,\"handles everything imaginable related to configuration. This is where we activate Django plugins, store database credentials, set our hostname, etc. This is usually the type of file you \"],[0,[3],1,\"don\\'t \"],[0,[],0,\"want to commit to Github (or if you do, make sure to obscure the credentials).\"]],[[0,[2],1,\"urls.py\"],[0,[],0,\" is where we set the \"],[0,[3],1,\"top-level\"],[0,[],0,\" URLs for our projects. Remember: Django projects are intended to be broken up into individual modules, so this file usually reserves a URL for each module, with modules handling their \"],[0,[3],1,\"own\"],[0,[],0,\" independent URL routers. \"]],[[0,[2],1,\"wsgi.py\"],[0,[],0,\" where we point webservers like Nginx, Caddy, or whatever to serve our site. You\\'ll probably never need to touch this.\"]]]],[1,\"h3\",[[0,[],0,\"manage.py\"]]],[1,\"p\",[[0,[],0,\"We briefly glossed over the other thing created we created when we ran \"],[0,[4],1,\"django-admin\"],[0,[],0,\": \"],[0,[2],1,\"manage.py\"],[0,[],0,\". This file is the key to the kingdom: it contains logic covering everything related to \u201cmanaging\u201d our project. For example:\"]]],[3,\"ul\",[[[0,[4],1,\"python3 manage.py runserver\"],[0,[],0,\" deploys our app in \\\\\"development mode\\\\\" so that we may access it via our browser (this will be accessible via \"],[0,[2],1,\"localhost\"],[0,[],0,\" by default).\"]],[[0,[4],1,\"python3 manage.py migrate\"],[0,[],0,\" updates your project\\'s database tables to match the data models you\\'ve defined.\"]],[[0,[4],1,\"python3 manage.py startapp [MY_APP_NAME]\"],[0,[],0,\" is the equivalent of \"],[0,[4],1,\"django-admin startproject [YOUR_PROJECT_NAME]\"],[0,[],0,\". Indeed, \"],[0,[3],1,\"django-admin\"],[0,[],0,\" is simply an alias for \"],[0,[3],1,\"manage.py!\"]]]],[1,\"p\",[[0,[],0,\"Definitely check out what \"],[0,[2],1,\"manage.py\"],[0,[],0,\" can do by running \"],[0,[4,4],1,\"python3 manage.py\"],[0,[],1,\" --help\"],[0,[],0,\" to list all \"],[0,[6],1,\"commands\"],[0,[],0,\" some other time. For now, we have a job to do: let\\'s make an app. \"]]],[1,\"p\",[[0,[],0,\"So far, all our app can do is serve a generic canned page confirmed that Django was installed correctly. Let\\'s confirm all is good:\"]]],[10,7],[1,\"p\",[[0,[],0,\"Now open your browser and check out \"],[0,[7],1,\"http://127.0.0.1:8000/\"],[0,[],0,\":\"]]],[10,8],[1,\"p\",[[0,[],0,\"Seeing this page is a beautiful thing, but we\u2019ve only barely started to lay the groundwork for a respectable app. Django development truly begins with its configuration, but don\\'t gloss over this just because it sounds boring: setting up Django reveals everything about how the framework works as a whole\"],[0,[2],1,\".\"]]],[1,\"h2\",[[0,[],0,\"Settings.py: The Gist of Django\"]]],[1,\"p\",[[0,[],0,\"The top section of \"],[0,[2],1,\"settings.py\"],[0,[],0,\" contains configuration variables that Django absolutely depends on to function. Without any modifications, this section should look as follows:\"]]],[10,9],[1,\"p\",[[0,[2],1,\"SECRET_KEY\"],[0,[],0,\" is a concept you might already be familiar with: in short, this is a random string of characters that Django uses to encrypt sensitive information passed around the app. This is automatically generated for you, but please, for the love of Steve Buscemi, just don\\'t share it with anybody.\"]]],[1,\"p\",[[0,[],0,\"Sometimes we make mistakes when writing code, and it isn\\'t always easy to figure out what when wrong.\"],[0,[2],1,\" \"],[0,[],0,\"With\"],[0,[2],1,\" DEBUG \"],[0,[],0,\"enabled, any parts of your app which throw errors will serve you a detailed error report of what went wrong.\"]]],[1,\"p\",[[0,[2],1,\"ALLOWED_HOSTS \"],[0,[],0,\"seems comically understated, as it is \"],[0,[3],1,\"the\"],[0,[],0,\" most important variable we to get Django working. When Django is running, ALLOWED_HOSTS serves as a whitelist for which traffic pointing to your app it will actually acknowledge. You could have Nginx perfectly configured to point to your Django app, but if the traffic source from Nginx isn\\'t present in ALLOWED_HOSTS, your app will not be accessible. \"]]],[1,\"p\",[[0,[],0,\"We\\'re going to run our app locally, so we should include \\\\\"hosts\\\\\" synonymous with your local machine:\"]]],[10,10],[1,\"p\",[[0,[],0,\"It\\'s a bit curious that hosts like \"],[0,[2],1,\"localhost\"],[0,[],0,\" aren\\'t present here by default. Whatever.\"]]],[1,\"p\",[[0,[],0,\"If you were building an app to be served at a domain like \"],[0,[2],1,\"example.com\"],[0,[],0,\", you\\'d include that hostname in your allowed hosts like so:\"]]],[10,11],[1,\"p\",[[0,[],0,\"Next in our configuration is \"],[0,[2],1,\"INSTALLED_APPS\"],[0,[],0,\". This one is a doozy; remember when we mentioned Django being a collection of modules called \\\\\"apps\\\\\"? When we create an app in Django, we need to add it to INSTALLED_APPS to actually be recognized and served in our project. The admittedly strange part about this is that Django considers its own core features to be called \\\\\"apps\\\\\" as well, which is why we see things like Django\\'s admin library pre-populated here. It\\'s not intuitive. We\\'ll come back to this after making our first \\\\\"app\\\\\" in a moment.\"]]],[1,\"h3\",[[0,[],0,\"Setting up a Database\"]]],[1,\"p\",[[0,[],0,\"Django really, really wants you to configure a database upfront, even if you aren\\'t going to use it right away. In fact, running \"],[0,[4],1,\"manage.py runserver\"],[0,[],0,\" without setting a database will \"],[0,[3],1,\"automatically create an SQLite database by default\"],[0,[],0,\". That\\'s because the database section of \"],[0,[2],1,\"settings.py\"],[0,[],0,\" starts off like this:\"]]],[10,12],[1,\"p\",[[0,[],0,\"Take special notice to the \"],[0,[2],1,\"ENGINE\"],[0,[],0,\" key and how it specifies that we\\'re using an SQLite database. This is Django using its internal SQLite connector to connect to our database. We aren\\'t limited to SQLite, however; any of the following database flavors are supported out of the box:\"]]],[3,\"ul\",[[[0,[4],1,\"\\'django.db.backends.mysql\\'\"],[0,[],0,\" (includes MariaDB in Django 3)\"]],[[0,[4],1,\"\\'django.db.backends.postgresql\\'\"]],[[0,[4],1,\"\\'django.db.backends.sqlite3\\'\"]],[[0,[4],1,\"\\'django.db.backends.oracle\\'\"]]]],[1,\"p\",[[0,[],0,\"We won\\'t be needing a database for our intro app, but if we hypothetically wanted our app to use a MySQL database, our config might look something like this:\"]]],[10,13],[1,\"p\",[[0,[],0,\"Even though we specify \"],[0,[4],1,\"\\'ENGINE\\': \\'django.db.backends.mysql\\'\"],[0,[],0,\", we still need to install the MySQL connector that Django expects, which happens to be \"],[0,[4],1,\"mysqlclient\"],[0,[],0,\". I don\\'t understand why, and I\\'d rather move the reasons why this is annoying:\"]]],[10,14],[1,\"h3\",[[0,[],0,\"Logging\"]]],[1,\"p\",[[0,[],0,\"Configuring logging is optional, but I\\'d recommend configuring this to keep a record of things gone wrong. Feel free to steal my configuration below:\"]]],[10,15],[1,\"h3\",[[0,[],0,\"Static Files\"]]],[1,\"p\",[[0,[],0,\"In the spirit of backend developers disrespecting frontend code, Django refers to all frontend code (such as JS, CSS, images, etc.) as \\\\\"static files.\\\\\" The term seems to imply that the product of frontend development is an afterthought to be tossed into a folder and forgotten, but whatever; we backed developers aren\\'t exactly heralded for our camaraderie or social skills.\"]]],[1,\"p\",[[0,[],0,\"We\\'ll keep all static files in one place for the purposes of \"],[0,[3],1,\"our\"],[0,[],0,\" app, but it\\'s otherwise somewhat common for Django apps to each contain their own styles and JavaScript. Our simple configuration looks like this:\"]]],[10,16],[1,\"p\",[[0,[],0,\"This means that our \\\\\"master node\\\\\" app, \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\", will host all of our CSS and what-not in a subdirectory called \"],[0,[2],1,\"/static\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Extra Settings\"]]],[1,\"p\",[[0,[],0,\"There are a lot more things we \"],[0,[3],1,\"could\"],[0,[],0,\" add to \"],[0,[2],1,\"settings.py\"],[0,[],0,\" ranging from email settings, file uploads, security tokens, whatever, If you\\'d like to explore those things, be my guest and \"],[0,[8],1,\"read the documentation\"],[0,[],0,\". The one variable I \"],[0,[3],1,\"will\"],[0,[],0,\" call out, however, is \"],[0,[2],1,\"APPEND_SLASH\"],[0,[],0,\". Enforcing slashes on URLs is dope as hell, so you should totally do this unless you\\'re some kind of weirdo:\"]]],[10,17],[1,\"h2\",[[0,[],0,\"Templates and Static Assets\"]]],[1,\"p\",[[0,[],0,\"Quick recap: Django projects are made up of modules called \\\\\"apps.\\\\\" Of these apps, there is always a \\\\\"master\\\\\" app that contains settings, logic, and anything to be shared across all child apps. \"]]],[1,\"p\",[[0,[],0,\"Page templates and static assets are among the things we can choose to share between apps in a Django project: If every part of our project is going to share the same base styles or the same HTML meta headers, we can opt to keep those things in \"],[0,[2],1,\"tutorialapp\"],[0,[],0,\" for our other apps to use. We\\'ll keep our site-wide styles and images in a directory named \"],[0,[2],1,\"/static,\"],[0,[],0,\" and our base page template in \"],[0,[2],1,\"/templates\"],[0,[],0,\". \"]]],[1,\"h3\",[[0,[],0,\"Our Base Page Template\"]]],[1,\"p\",[[0,[],0,\"If you aren\\'t familiar with page templating systems like Handlebars or Jinja, I\\'m gonna have to leave you in the dark here to keep moving. Take a few minutes to read up on \"],[0,[9],1,\"Jinja\"],[0,[],0,\" when you can.\"]]],[1,\"p\",[[0,[],0,\"Every page of most sites shares roughly the same boilerplate of meta tags and so forth. Instead of duplicating boilerplate every time we make a new page, we\\'ll create a \\\\\"base\\\\\" page called \"],[0,[2],1,\"layout.html\"],[0,[],0,\" which we\\'ll use to load other page templates into:\"]]],[10,18],[1,\"p\",[[0,[],0,\" \"],[0,[4],1,\"{% load static %}\"],[0,[],0,\" tells Django to look for our static files in our static folder. It\\'s a bit redundant, but whatever. Once that\\'s done, we can load in assets like stylesheets as we do with \"],[0,[4],1,\"{% static \\'css/styles.css\\' %}\"]]],[1,\"p\",[[0,[],0,\"With that done, \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" now looks like this: \"]]],[10,19],[1,\"h2\",[[0,[],0,\"Making a Django \\\\\"App\\\\\"\"]]],[1,\"p\",[[0,[],0,\"We\\'re roughly 3000 words deep into this tutorial and we haven\\'t even written any meaningful logic yet. I wasn\\'t kidding when I said Django was rigid, but the good news is getting set up is the hardest part: everyday Django development is far more straightforward than what we\\'ve dealt with so far.\"]]],[1,\"p\",[[0,[4],1,\"cd\"],[0,[],0,\" back into the top-level directory which contains \"],[0,[2],1,\"manage.py\"],[0,[],0,\". We\\'ll create our first app by using this command:\"]]],[10,20],[1,\"p\",[[0,[3],1,\"Now\"],[0,[],0,\" we can start writing actual business logic. Remember: our goal is to serve a single-page application. Eyes on the prize here, folks.\"]]],[1,\"p\",[[0,[],0,\"I used the \"],[0,[4],1,\"startapp\"],[0,[],0,\" command to create a Django app named \"],[0,[2],1,\"myapp\"],[0,[],0,\". Here\\'s what came out of it:\"]]],[10,21],[1,\"p\",[[0,[],0,\"Models? Views? Things are starting to feel more MVC already. Here are the broad strokes of what makes a Django app tick:\"]]],[3,\"ul\",[[[0,[2],1,\"models.py\"],[0,[],0,\" is where we\\'d store database models for Django\\'s ORM. For the scope of this tutorial, we aren\\'t going to bother with database interactions. By the time we actually manage to serve a page template, we\\'ll both be too burnt out to function anyway.\"]],[[0,[2],1,\"views.py\"],[0,[],0,\" is where we handle building and serving \\\\\"views\\\\\" to users - more on this in a moment.\"]],[[0,[2],1,\"urls.py\"],[0,[],0,\" is actually missing here, but it\\'s expected that any Django app intending to \\\\\"serve\\\\\" pages or endpoints will have them. Setting \\\\\"urls\\\\\" is equivalent to setting routes: this is where we tell Django to serve view X when visiting URL Y.\"]]]],[1,\"p\",[[0,[],0,\"To make our first page, we\\'ll start by creating a view in \"],[0,[2],1,\"views.py\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Creating a Homepage\"]]],[1,\"p\",[[0,[],0,\"A \"],[0,[3],1,\"view\"],[0,[],0,\" is simply \\\\\"something to serve to a user at a given URL.\\\\\" When a user requests a URL from whichever domain Django is hosted on, Django looks through its collection of routes (the stuff in \"],[0,[2],1,\"urls.py\"],[0,[],0,\") to see if the requested URL is associated with a \"],[0,[3],1,\"view\"],[0,[],0,\". If an association exists, Django passes information about the requester to the view function, and the user is served a response (like a web page). Here\\'s what a simple view looks like:\"]]],[10,22],[1,\"p\",[[0,[],0,\"The only \\\\\"magic\\\\\" happening here is thanks to two things Django provides to us: the \"],[0,[4],1,\"request\"],[0,[],0,\" object and the \"],[0,[4],1,\"render\"],[0,[],0,\" function:\"]]],[3,\"ul\",[[[0,[2],1,\"request\"],[0,[],0,\" is an object inherently passed to a view whenever a view is requested. \"],[0,[4],1,\"request\"],[0,[],0,\" contains metadata about the incoming request such as headers, parameters, HTTP method, etc. Most views would use this metadata as a way to serve responses contextually, but we\\'re not going to do anything special today.\"]],[[0,[2],1,\"render\"],[0,[],0,\" builds a response to serve to users. In this case, we\\'re returning a page template called \"],[0,[3],1,\"index.html, \"],[0,[],0,\"as well as a few variables to render with our page dynamically.\"]]]],[1,\"p\",[[0,[],0,\"So our view is set to return a template at \"],[0,[2],1,\"myapp/index.html\"],[0,[],0,\", but that template doesn\\'t actually exist yet. We need to create a \"],[0,[2],1,\"templates\"],[0,[],0,\" folder in our \\\\\"myapp\\\\\" module. Django looks for templates here in a way that isn\\'t \"],[0,[3],1,\"entirely\"],[0,[],0,\" intuitive. Check out our app\\'s folder structure after we add a template and corresponding stylesheet:\"]]],[10,23],[1,\"p\",[[0,[],0,\" Yes, our \"],[0,[2],1,\"/templates\"],[0,[],0,\" folder contains a subdirectory named \"],[0,[2],1,\"/myapp\"],[0,[],0,\",\"],[0,[2],1,\" \"],[0,[],0,\"which\"],[0,[2],1,\" \"],[0,[],0,\"matches the name of the Django app. This a Django thing, and it\\'s admittedly a bit confusing.\"]]],[1,\"p\",[[0,[],0,\"Moving on to \"],[0,[2],1,\"index.html\"],[0,[],0,\", all we need to do here is extend the \"],[0,[2],1,\"layout.html\"],[0,[],0,\" template we made earlier and fill in some content. We\\'ll load in the attributes we passed in our view to keep things interesting:\"]]],[10,24],[1,\"p\",[[0,[],0,\"Values in double brackets (\"],[0,[4],1,\"{{title}}\"],[0,[],0,\", \"],[0,[4],1,\"{{template}}\"],[0,[],0,\", and \"],[0,[4],1,\"{{description}}\"],[0,[],0,\") will be replaced with the values of the matching keys in the dictionary we created in our index view. Then, the entirety of our block named \\\\\"content\\\\\" will get loaded into the space we reserved in \"],[0,[2],1,\"layout.html\"],[0,[],0,\" for the very same block name.\"]]],[1,\"h3\",[[0,[],0,\"Setting a URL Route\"]]],[1,\"p\",[[0,[2],1,\"myapp\"],[0,[],0,\" now has a view, as well as a corresponding template. The only thing missing is specifying which URL should \"],[0,[3],1,\"route\"],[0,[],0,\" to this view. Go ahead and create \"],[0,[2],1,\"urls.py\"],[0,[],0,\":\"]]],[10,25],[1,\"p\",[[0,[4],1,\"urlpatterns\"],[0,[],0,\" is a list of \"],[0,[4],1,\"path\"],[0,[],0,\"s, where each \"],[0,[4],1,\"path\"],[0,[],0,\" consists of three parameters:\"]]],[3,\"ol\",[[[0,[],0,\"The URL pattern to serve our view at. This always takes the form of a regex pattern. In our example, we want our view to be the homepage, therefore providing an empty string tells Django to serve our view at our site\\'s root.\"]],[[0,[],0,\"The view we created in \"],[0,[2],1,\"views.py\"],[0,[],0,\". This is the view that will be served to the user when visiting the URL pattern specified above.\"]],[[0,[],0,\"The \\\\\"name\\\\\" of our route. Giving our route a name is an easy way to reference URL patterns later on.\"]]]],[1,\"p\",[[0,[2],1,\"urls.py\"],[0,[],0,\" allows us to set different URLs pointing to the same view, meaning we can serve the same view at different URLs. For example, here\\'s how we can expand \"],[0,[4],1,\"urlpatterns\"],[0,[],0,\" to serve the same page at different URLs:\"]]],[10,26],[1,\"p\",[[0,[],0,\"Django will now respect three different routes to serve our homepage: \"],[0,[4],1,\"/home\"],[0,[],0,\", \"],[0,[4],1,\"/home?user=todd\"],[0,[],0,\", and our root (aka \"],[0,[4],1,\"/\"],[0,[],0,\"). The last example is a way to specify query string parameters to our view, which is a good way to offer context to our views for more dynamic content. \"]]],[1,\"p\",[[0,[],0,\"It\\'s worth noting that we\\'re allowed to specify the same name for each of these routes, even though they can technically accept URLs.\"]]],[1,\"h2\",[[0,[],0,\"Activating myapp\"]]],[1,\"p\",[[0,[],0,\"Our app is almost ready! There\\'s one thing left to do... remember the list of \"],[0,[4],1,\"INSTALLED_APPS\"],[0,[2],1,\" \"],[0,[],0,\"that lives in \"],[0,[2],1,\"settings.py\"],[0,[],0,\"? We still need to add our app here before Django respects it: \"]]],[10,27],[1,\"p\",[[0,[],0,\"We\\'re almost there, folks. Our app is good-to-go, and it\\'s been sufficiently \\\\\"installed.\\\\\" The only thing left is tell our core Django app to listen to the urls \"],[0,[2],1,\"myapp/urls.py\"],[0,[],0,\" in our main module. To do this, we need to modify our core Django app\\'s \"],[0,[2],1,\"urls.py\"],[0,[],0,\" to look something like this:\"]]],[10,28],[1,\"p\",[[0,[],0,\"This probably seems confusing as shit, but the good news is \"],[0,[2,3],2,\"we\\'re done! \"],[0,[],0,\"Let\\'s wrap our heads around this before we see our app in action.\"]]],[1,\"p\",[[0,[],0,\"Any time a user visits our deployed Django server (at 127.0.0.1:8000 in our case),   our \\\\\"master app\\\\\" \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"picks up the incoming traffic. \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"compares the URL the user provided to its list of URLs in \"],[0,[2],1,\"urls.py\"],[0,[],0,\", and if a match is found, the user is then directed accordingly. In our example, we\\'re expecting users only to visit the homepage (AKA the root directory, AKA \"],[0,[4],1,\"/\"],[0,[],0,\"), which is why our url is seen as an empty string. Our \"],[0,[2],1,\"urls.py\"],[0,[],0,\" file tells \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"to \"],[0,[3],1,\"defer \"],[0,[],0,\"traffic coming to this URL to \"],[0,[2],1,\"myapp\"],[0,[],0,\", which then takes over from there. The end result is effectively a route that points to another route, which points to a view, which happens to serve our homepage. Run \"],[0,[4],1,\"python manage.py runserver\"],[0,[],0,\" to see for yourself:\"]]],[10,29],[1,\"h2\",[[0,[],0,\"I Hope Somebody Actually Read This\"]]],[1,\"p\",[[0,[],0,\"I\\'ve you\\'ve managed to survive this long, you\\'re probably feeling a lot of emotions right now. Fatigue, pride, confusion, hope... perhaps all of the above. This is normal, especially if you happen to be a newcomer to MVC (in which case I\\'m sorry that you landed \"],[0,[3],1,\"here\"],[0,[],0,\" of all places).\"]]],[1,\"p\",[[0,[],0,\"Make no mistake: Django is no joke. The power of a fully-featured web framework comes with a lot of shit to unpack, but the feeling of  overwhelming complexity fades quickly as these patterns become more familiar. As with all things software related, it takes a bit of fussing around before the concepts of Django truly \\\\\"click.\\\\\" For that reason, I\\'ve gone ahead and uploaded the source code for this tutorial to Github for you to pull down and mess around with. You might just be surprised by what you come up with.\"]]],[10,30],[1,\"p\",[]]]}', 'comment_id': '5a101454d201b772c140d36e', 'feature_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'featured': False, 'status': 'published', 'visibility': 'public', 'created_at': '2017-11-18T11:07:00.000Z', 'updated_at': '2020-11-13T16:17:02.000Z', 'published_at': '2019-12-04T17:49:00.000Z', 'custom_excerpt': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'codeinjection_head': None, 'codeinjection_foot': None, 'custom_template': None, 'canonical_url': None, 'send_email_when_published': False, 'authors': [{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T19:46:04.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T19:46:04.000Z', 'url': 'https://hackersandslackers.app/author/todd/'}], 'primary_author': {'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T19:46:04.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T19:46:04.000Z', 'url': 'https://hackersandslackers.app/author/todd/'}, 'url': 'https://hackersandslackers.app/getting-started-django/', 'excerpt': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'og_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'og_title': 'Getting Started with Django', 'og_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'twitter_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'twitter_title': 'Getting Started with Django', 'twitter_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'meta_title': 'Getting Started with Django', 'meta_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'email_subject': 'Getting Started with Django'}]}", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:08:51", "message": "Fetched Ghost post `getting-started-django` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5bf92)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:17", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:17", "message": "https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5bf92", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:17", "message": "{'posts': [{'id': '5dc42cb812c9ce0d63f5bf92', 'uuid': '77609409-5552-418d-b742-c549a2ccf01b', 'title': 'Getting Started with Django', 'slug': 'getting-started-django', 'mobiledoc': '{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://res-4.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/11/django-popularity.jpg\",\"caption\":\"General in MVC frameworks over 6 years.\"}],[\"html\",{\"html\":\"<div class=\\\\\"subtext\\\\\">\\\\n* This is a meaningless claim. Nothing we\u2019ll cover has changed from Django 2.x, but claiming this achievement makes my life appear less meaningless.\\\\n</div>\"}],[\"code\",{\"code\":\"# Create virtual environment\\\\n$ python3.8 -m venv .venv\\\\n\\\\n# Activate virtual environment\\\\n$ . .venv/bin/activate\\\\n\\\\n# Install django in virtual environment\\\\n$ pip install django    \",\"language\":\"shell\"}],[\"code\",{\"code\":\"$ python3 -m django --version\\\\n>> 3.0\",\"language\":\"shell\",\"caption\":\"Check your version of Django\"}],[\"code\",{\"code\":\"$ django-admin startproject [YOUR_PROJECT_NAME]\",\"language\":\"shell\",\"caption\":\"Start a new Django project\"}],[\"code\",{\"code\":\"/djangotutorial\\\\n  \u251c\u2500\u2500 /djangotutorial\\\\n  \u2502   \u251c\u2500\u2500 __init__.py\\\\n  \u2502   \u251c\u2500\u2500 settings.py\\\\n  \u2502   \u251c\u2500\u2500 urls.py\\\\n  \u2502   \u2514\u2500\u2500 wsgi.py\\\\n  \u2514\u2500\u2500 manage.py\",\"language\":\"shell\",\"caption\":\"File structure of our new app\"}],[\"image\",{\"caption\":\"Example Django project structure.\",\"src\":\"https://res-4.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django-project.png\"}],[\"code\",{\"code\":\"$ python3 manage.py runserver\\\\n\\\\nWatching for file changes with StatReloader\\\\nPerforming system checks...\\\\n\\\\nSystem check identified no issues (0 silenced).\\\\nDecember 04, 2019 - 23:18:54\\\\nDjango version 3.0, using settings \\'djangotutorial.settings\\'\\\\nStarting development server at http://127.0.0.1:8000/\\\\nQuit the server with CONTROL-C.\\\\n\",\"language\":\"shell\",\"caption\":\"Output of running Django\\'s \\\\\"development\\\\\" server\"}],[\"image\",{\"src\":\"https://res-1.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django_helloworld_runserver.png\",\"caption\":\"Django\\'s installation confirmation screen\"}],[\"code\",{\"code\":\"import os\\\\n\\\\n# SECURITY WARNING: keep the secret key used in production secret!\\\\nSECRET_KEY = \\'$HVG687rTFDuYdtfg8yiuf87fuib&)lw#6btg5_p\\'\\\\n\\\\n# SECURITY WARNING: don\\'t run with debug turned on in production!\\\\nDEBUG = True\\\\n\\\\nALLOWED_HOSTS = []\\\\n\\\\n# Application definition\\\\nINSTALLED_APPS = [\\\\n    \\'django.contrib.admin\\',\\\\n    \\'django.contrib.auth\\',\\\\n    \\'django.contrib.contenttypes\\',\\\\n    \\'django.contrib.sessions\\',\\\\n    \\'django.contrib.messages\\',\\\\n    \\'django.contrib.staticfiles\\',\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"ALLOWED_HOSTS = [\\\\n    \\'0.0.0.0\\',\\\\n    \\'127.0.0.1\\',\\\\n    \\'localhost\\',\\\\n    \\'127.0.0.1:8000\\'\\\\n]\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"ALLOWED_HOSTS = [\\\\n    \\'0.0.0.0\\',\\\\n    \\'127.0.0.1\\',\\\\n    \\'localhost\\',\\\\n    \\'127.0.0.1:8000\\',\\\\n    \\'example.com\\'\\\\n ]\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Database\\\\nDATABASES = {\\\\n    \\'default\\': {\\\\n        \\'ENGINE\\': \\'django.db.backends.sqlite3\\',\\\\n        \\'NAME\\': os.path.join(BASE_DIR, \\'db.sqlite3\\'),\\\\n    }\\\\n}\\\\n\\\\n...\",\"language\":\"python\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Database\\\\nDATABASES = {\\\\n    \\'default\\': {\\\\n        \\'ENGINE\\': \\'django.db.backends.mysql\\',\\\\n        \\'NAME\\': \\'myDatabase\\',\\\\n        \\'USER\\': \\'root\\',\\\\n        \\'PASSWORD\\': \\'password123\\',\\\\n        \\'HOST\\': \\'534.13.356.35\\',\\\\n        \\'PORT\\': \\'3306\\',\\\\n    }\\\\n}\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"$ pip3 install mysqlclient\",\"language\":\"python\",\"caption\":\"Install a Python library to connect to MySQL\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Logging\\\\nLOGGING = {\\\\n    \\'version\\': 1,\\\\n    \\'disable_existing_loggers\\': False,\\\\n    \\'handlers\\': {\\\\n        \\'file\\': {\\\\n            \\'level\\': \\'DEBUG\\',\\\\n            \\'class\\': \\'logging.FileHandler\\',\\\\n            \\'filename\\': \\'logs/debug.log\\',\\\\n        },\\\\n    },\\\\n    \\'loggers\\': {\\\\n        \\'django\\': {\\\\n            \\'handlers\\': [\\'file\\'],\\\\n            \\'level\\': \\'DEBUG\\',\\\\n            \\'propagate\\': True,\\\\n        },\\\\n    },\\\\n}\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Static files (CSS, JavaScript, Images)\\\\nSTATIC_URL = \\'/static/\\'\\\\nSTATICFILES_DIRS = [\\\\n    os.path.join(PROJECT_DIR, \\\\\"static\\\\\")\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"APPEND_SLASH = True\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"{% load static %}\\\\n\\\\n<!DOCTYPE html>\\\\n<html lang=\\\\\"en\\\\\">\\\\n\\\\n<head>\\\\n<title>{{title}}</title>\\\\n  <meta charset=\\\\\"utf-8\\\\\" />\\\\n  <meta name=\\\\\"description\\\\\" content=\\\\\"This is a description\\\\\">\\\\n  <meta name=\\\\\"HandheldFriendly\\\\\" content=\\\\\"True\\\\\" />\\\\n  <meta name=\\\\\"viewport\\\\\" content=\\\\\"width=device-width, initial-scale=1.0, viewport-fit=cover\\\\\" />\\\\n  <meta name=\\\\\"theme-color\\\\\" content=\\\\\"#5eb9d7\\\\\">\\\\n  <link rel=\\\\\"apple-touch-icon\\\\\" href=\\\\\"icon.png\\\\\">\\\\n  <link rel=\\\\\"stylesheet\\\\\" href=\\\\\"https://use.typekit.net/uqq2lcv.css\\\\\">\\\\n  <link href=\\\\\"{% static \\'css/styles.css\\' %}\\\\\" rel=\\\\\"stylesheet\\\\\" type=\\\\\"text/css\\\\\">\\\\n</head>\\\\n\\\\n<body class=\\\\\"{{template}}\\\\\">\\\\n    {% block content %}{%  endblock %}\\\\n</body>\\\\n\\\\n</html>\\\\n\",\"language\":\"jinja2\",\"caption\":\"layout.html\"}],[\"code\",{\"code\":\"/djangotutorial\\\\n\u251c\u2500\u2500 /static\\\\n\u2502   \u251c\u2500\u2500 /css\\\\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\\\\n\u2502   \u2514\u2500\u2500 /img\\\\n\u2502       \u2514\u2500\u2500 logo.png\\\\n\u251c\u2500\u2500 /templates\\\\n\u2502   \u2514\u2500\u2500 layout.html\\\\n\u251c\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 settings.py\\\\n\u251c\u2500\u2500 urls.py\\\\n\u2514\u2500\u2500 wsgi.py\",\"language\":\"shell\",\"caption\":\"<code>/djangotutorial</code> directory\"}],[\"code\",{\"code\":\"$ django-admin startapp [YOUR_APP_NAME]\",\"language\":\"shell\",\"caption\":\"Create a Django \\\\\"app\\\\\"\"}],[\"code\",{\"code\":\"/myapp\\\\n  \u251c\u2500\u2500 __init__.py\\\\n  \u251c\u2500\u2500 admin.py\\\\n  \u251c\u2500\u2500 apps.py\\\\n  \u251c\u2500\u2500 /migrations\\\\n  \u2502   \u2514\u2500\u2500 __init__.py\\\\n  \u251c\u2500\u2500 models.py\\\\n  \u251c\u2500\u2500 tests.py\\\\n  \u2514\u2500\u2500 views.py\",\"language\":\"shell\",\"caption\":\"Basic structure of a Django \\\\\"app\\\\\"\"}],[\"code\",{\"code\":\"from django.shortcuts import render\\\\n\\\\n\\\\ndef index(request):\\\\n    context = {\\\\n        \\'template\\': \\'homepage\\',\\\\n        \\'title\\': \\'My Django App\\',\\\\n        \\'description\\': \\'You\\\\\\\\\\'ve launched your first Django app!\\'\\\\n    }\\\\n    return render(request, \\'myapp/index.html\\', context)\",\"language\":\"python\",\"caption\":\"views.py\"}],[\"code\",{\"code\":\"/myapp\\\\n\u251c\u2500\u2500 /templates\\\\n\u2502\\xa0\\xa0 \u2514\u2500\u2500 /myapp\\\\n\u2502\\xa0\\xa0     \u2514\u2500\u2500 index.html\\\\n\u251c\u2500\u2500 /migrations\\\\n\u2502\\xa0\\xa0 \u2514\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 admin.py\\\\n\u251c\u2500\u2500 apps.py\\\\n\u251c\u2500\u2500 models.py\\\\n\u251c\u2500\u2500 tests.py\\\\n\u2514\u2500\u2500 views.py\",\"language\":\"shell\",\"caption\":\"Django app containing page templates\"}],[\"code\",{\"code\":\"{% extends \\'layout.html\\' %}\\\\n{% load static %}\\\\n\\\\n{% block content %}\\\\n    <div class=\\\\\"card\\\\\">\\\\n        <img src=\\\\\"{% static \\'img/logo.png\\' %}\\\\\" alt=\\\\\"logo\\\\\" class=\\\\\"logo\\\\\" />\\\\n        <h1>Hello world!</h1>\\\\n        <p>{{ description }}</p>\\\\n    </div>\\\\n{%  endblock %}\\\\n\",\"language\":\"jinja2\",\"caption\":\"index.html\"}],[\"code\",{\"code\":\"from django.urls import path\\\\n\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path(\\'\\', views.index, name=\\'index\\'),\\\\n]\",\"language\":\"python\",\"caption\":\"urls.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\nurlpatterns = [\\\\n    path(\\'\\', views.index, name=\\'index\\'),\\\\n    path(r\\'^home/$\\', views.index, name=\\'index\\'),\\\\n    path(r\\'^home/(?P<user>\\\\\\\\w+)$\\', views.index, name=\\'index\\'),\\\\n]\",\"caption\":\"urls.py\",\"language\":\"python\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Application definition\\\\nINSTALLED_APPS = [\\\\n    \\'django.contrib.admin\\',\\\\n    \\'django.contrib.auth\\',\\\\n    \\'django.contrib.contenttypes\\',\\\\n    \\'django.contrib.sessions\\',\\\\n    \\'django.contrib.messages\\',\\\\n    \\'django.contrib.staticfiles\\',\\\\n    \\'myapp\\',\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"from django.contrib import admin\\\\nfrom django.urls import path, include\\\\n\\\\nurlpatterns = [\\\\n    path(\\'admin/\\', admin.site.urls),\\\\n    path(\\'\\', include(\\'myapp.urls\\')),\\\\n]\\\\n\",\"language\":\"python\",\"caption\":\"djangotutorial/urls.py\"}],[\"image\",{\"src\":\"https://res-5.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django-homepage.png\",\"caption\":\"Our live homepage served by Django.\"}],[\"bookmark\",{\"type\":\"bookmark\",\"url\":\"https://github.com/hackersandslackers/django-intro-tutorial\",\"metadata\":{\"url\":\"https://github.com/hackersandslackers/django-intro-tutorial\",\"title\":\"hackersandslackers/django-intro-tutorial\",\"description\":\"\ud83d\ude80\u2705 Get started with Django by building your first web app. - hackersandslackers/django-intro-tutorial\",\"author\":\"hackersandslackers\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://repository-images.githubusercontent.com/225977066/21fbe900-1719-11ea-90cc-536b180a5e0d\",\"icon\":\"https://github.githubassets.com/favicon.ico\"}}]],\"markups\":[[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Adrian_Holovaty\"]],[\"a\",[\"href\",\"https://jacobian.org/\"]],[\"strong\"],[\"em\"],[\"code\"],[\"a\",[\"href\",\"https://hackersandslackers.app/pipenv-python-environment-management/\"]],[\"a\",[\"href\",\"https://docs.djangoproject.com/en/2.2/ref/django-admin/\"]],[\"a\",[\"href\",\"http://127.0.0.1:8000/\"]],[\"a\",[\"href\",\"https://docs.djangoproject.com/en/2.2/ref/settings/#databases\"]],[\"a\",[\"href\",\"https://hackersandslackers.app/flask-page-templates-jinja/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"There isn\\'t much I can say that hasn\\'t already been said about Django: the granddaddy of all web frameworks. I owe a large part of my engineering career to learning Django on a whim in 2012. Django was a surprisingly elegant take on MVC, written in a programming language that was far from mainstream at the time of Django\\'s inception. Most of us have surely forgotten what it was like to learn 1) programming language, 2) a framework, and 3) an entire programming paradigm, all at the same time. In the face of that challenge, \"],[0,[0],1,\"Adrian Holovaty\"],[0,[],0,\" and \"],[0,[1],1,\"Jacob Kaplan-moss\"],[0,[],0,\" produced a phenomenal book dubbed \"],[0,[2],1,\"The Definitive Guide To Django\"],[0,[],0,\", which artfully articulated all of those things simultaneously. I believe the book is now either free or serves as Django\\'s official documentation. Without those who created Django and championed its mainstream popularity, our website of sloppy Python tutorials surely would not exist today.\"]]],[1,\"p\",[[0,[],0,\"To say a lot has happened since 2012 would be the understatement of the decade. Staying within the topic of software, some might remember the prophecy of \"],[0,[2],1,\"Ruby on Rails\"],[0,[],0,\" eating the world. It was a popular sentiment which coincidentally took rise while Guido Von Rossen \"],[0,[3],1,\"enraged\"],[0,[],0,\" the Python community with the announcement of \"],[0,[2],1,\"Python 3 \"],[0,[],0,\"(which was, for the record, a completely necessary and reasonable course of action). My condolences to the families of developers lost to traumatic finger injuries, as they were forced to rewrite their \"],[0,[4],1,\"print\"],[0,[],0,\" statements to include parenthesis. Pessimistic commentary surrounding the future of Python (and Django) was everywhere- even our elitist Hacker News overlords couldn\\'t help themselves from the phrase \u201cPython is dead\u201d (which I wholeheartedly hope somebody takes the time to create a meme collection of). It was a comedy of short-sighted hyperbole, or in other words, typical software engineer banter. That\\'s around the time when \"],[0,[2],1,\"#TeamRuby\"],[0,[],0,\" collapsed harder than the Soviet Union. The timing of new NodeJS frameworks served as safe-havens for refugees: lucky JavaScript developers now have an infinite supply of soon-to-be-obsolete frameworks to spend the rest of their lives with.\"]]],[1,\"p\",[[0,[],0,\"So why start writing Django tutorials \"],[0,[3],1,\"now?\"],[0,[],0,\" I\\'ve had a very public and notorious love affair with Flask for well over a year now... how does Django fit into this love triangle? Is this considered cheating?\"]]],[1,\"p\",[[0,[],0,\"Let\\'s consider the top complaints developers have about their profession. Perhaps the most common (and painfully cliche) complaint is that software professionals are pressured to learn \\\\\"countless frameworks\\\\\" to stay relevant in the industry. That surely feels like an unfortunate fate when compared to the non-technical office worker, who has learned exactly zero frameworks. Is there legitimacy to this complaint? Well, let\\'s start by looking at how a sample of how MVC frameworks have fared over the past six years:\"]]],[10,0],[1,\"p\",[[0,[],0,\"Google search trends aren\\'t flawlessly scientific, but it\\'s hard to deny Django\\'s resilient popularity. Django is the only example in this sample which is highly relevant in \"],[0,[3],1,\"both\"],[0,[],0,\" 2013 and 2019, and actually \"],[0,[3],1,\"gains\"],[0,[],0,\" interest over time to steal the #1 most Googled MVC framework in 2019. Different surveys will tell narratives, but there\\'s an undeniable truth worth recognizing: if a software developer spent their entire career developing exclusively in Django, they could comfortably retire from a successful career having learned only a single framework. In fact, \"],[0,[3],1,\"any\"],[0,[],0,\" of us could have chosen to do so, and still can. The mystery of human nature instead leads down self-destructive paths, hurting ourselves with diseases like Angular, or even worse, ASP.NET.\"]]],[1,\"p\",[[0,[],0,\"Anyway, welcome to Django 101. This post is the first in a series where we dissect Django from top-to-bottom for people in 2019. If you\\'ve ever felt the hopeless feeling that the world has an unfair 10-year head start doing something you love, this series is for you. Welcome to the family.\"]]],[1,\"h3\",[[0,[],0,\"A Note About Django Vs Flask\"]]],[1,\"p\",[[0,[],0,\"This comparison is bound to pop up, so let\u2019s get it out of the way.\"]]],[1,\"p\",[[0,[2],1,\"Flask\u2019s\"],[0,[],0,\" claim to fame is its zero-configuration quick-start, which contains seven lines of code and exactly zero bells-and-whistles. Flask prioritizes ease-of-entry over features, where \u201cfeatures\u201d are plugins (AKA Flask-specific Python libraries).\"]]],[1,\"p\",[[0,[2],1,\"Django\"],[0,[],0,\" is the antithesis to Flask\u2019s \u201cas-you-go\u201d philosophy of development. Batteries are included with Django to the extent where Django\u2019s batteries have batteries of their own. No amount of imagination could fathom a paradigm that Django doesn\\'t handle out of the box.\"]]],[1,\"p\",[[0,[],0,\"Flask is akin to the lean startup advocating agile, whereas Django is equivalent to an Enterprise behemoth in denial about using waterfall (this analogy is also a pretty accurate manifestation of who-uses-what). I\u2019ve found Flask to have a much easier learning curve, partially because Flask is \"],[0,[3],1,\"far less\"],[0,[],0,\" rigid than Django. Flask projects inherently have no sense of structure, whereas Django \"],[0,[3],1,\"forces\"],[0,[],0,\" developers into an organized paradigm. Flask projects have the ability to be structured similarly to Django, but cohesiveness becomes highly unlikely as your development team approaches hundreds of devs. This reason alone enough to perpetuate an assumption you probably already have: \u201cDjango for large projects, Flask for small projects.\u201d I\u2019m not suggesting this is entirely accurate, but it isn\u2019t \"],[0,[3],1,\"inaccurate\"],[0,[],0,\"  either.\"]]],[1,\"h2\",[[0,[],0,\"Getting Started\"]]],[1,\"p\",[[0,[],0,\"The goal of this tutorial is to create the simplest  possible Django application that provides \"],[0,[3],1,\"some sort of value\"],[0,[],0,\". Learning to print \u201cHello world\u201d is fine, but it\u2019s kind of a useless exercise in terms of learning the internals of a Framework. We\u2019ll instead focus on building an application that serves a single HTML page. It doesn\\'t sound like much, but you should walk away with a grasp of:\"]]],[3,\"ul\",[[[0,[],0,\"Installing and running Django locally\"]],[[0,[],0,\"Configuring Django settings properly\"]],[[0,[],0,\"Creating and managing \u201capp\u201d modules\"]],[[0,[],0,\"Serving templates via Django\u2019s native templating system\"]],[[0,[],0,\"Styling templates with static assets\"]],[[0,[],0,\"Routing in Django\"]]]],[1,\"p\",[[0,[],0,\"To make things interesting, I\u2019ll be walking through this with Django 3.0, which was actually released two days ago. You could very well be reading the first Django 3 tutorial ever written*.*\"]]],[1,\"p\",[[0,[],0,\"We\u2019re going to be running Django locally for the purpose of this tutorial. If you\u2019re looking for details to set up Django on Ubuntu, I\\'d start \"],[0,[2],1,\"here.\"]]],[10,1],[1,\"h3\",[[0,[],0,\"Installing Django in a Virtual Environment\"]]],[1,\"p\",[[0,[],0,\"As always, we want to set up a virtual environment for our project before installing Python packages. Feel free to use whichever Python virtual environment you\\'re comfortable with; I\\'m personally going to use \"],[0,[5],1,\"Pipenv\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[4],1,\"cd\"],[0,[],0,\" into the directory you\\'d like to start your app in and create your virtual environment:\"]]],[10,2],[1,\"p\",[[0,[],0,\"Now we have an active virtual environment with Django installed. Just to make sure everything is fine, run the following line to check the proper version of Django was installed:\"]]],[10,3],[1,\"p\",[[0,[],0,\"We\\'re ready to rock. Lucky for us, Django has a built-in command called \"],[0,[4],1,\"django-admin\"],[0,[],0,\" to help us generate our first project (amongst other things we\\'ll explore later). To generate the scaffolding for our project, we invoke one of \"],[0,[4],1,\"django-admin\"],[0,[],0,\"\\'s methods called \"],[0,[4],1,\"startproject\"],[0,[],0,\":\"]]],[10,4],[1,\"p\",[[0,[],0,\"Boom, we just started our first project! My project happens to be called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\". Let\\'s see what\\'s inside.\"]]],[1,\"h2\",[[0,[],0,\"Anatomy of a Django App\"]]],[1,\"p\",[[0,[],0,\"The first key to understanding Django is understanding the pieces that make it work. Here are the \\\\\"pieces\\\\\" we created by starting our project:\"]]],[10,5],[1,\"p\",[[0,[],0,\"Our new project contains one \"],[0,[3],1,\"file\"],[0,[],0,\" and one \"],[0,[3],1,\"directory\"],[0,[],0,\". We\\'ll touch on what purpose \"],[0,[2],1,\"manage.py\"],[0,[],0,\" serves in a moment, but let\\'s first address the glaring question: is why there a folder called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" in our project called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\"? It\u2019s as though we just started a band called Iron Maiden, created a song named Iron Maiden, and featured it on our new album: Iron Maiden. It seems strange, but this begins to make sense as we unravel how Django apps scale.\"]]],[1,\"p\",[[0,[],0,\"Django projects are designed to be large by design: a single Django project is intended to consist of modules, or as Django calls them, \u201capps\u201d. Let\u2019s see what a mature Django project with multiple \u201capps\u201d might look like:\"]]],[10,6],[1,\"p\",[[0,[],0,\"It\u2019s best to think of a Django \\\\\"app\u201d as a subsection of your project that serves a general purpose. Think along the lines of a checkout flow for an e-commerce site, or logged-in user profiles: both of those examples would probably consist of multiple pages, but share common logic and assets between those pages.\"]]],[1,\"p\",[[0,[],0,\"One of our apps always shares the name of the parent project. This app contains the \u201ccore\u201d of our project: it serves as the entry point, which ties our other apps together and holds settings common to all of our apps, such as database information. It would be fairly accurate to state Django projects are a collection of app \u201cnodes,\u201d where \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" is our \u201cmaster node.\u201d Here\\'s what\\'s inside:\"]]],[3,\"ul\",[[[0,[2],1,\"settings.py \"],[0,[],0,\"handles everything imaginable related to configuration. This is where we activate Django plugins, store database credentials, set our hostname, etc. This is usually the type of file you \"],[0,[3],1,\"don\\'t \"],[0,[],0,\"want to commit to Github (or if you do, make sure to obscure the credentials).\"]],[[0,[2],1,\"urls.py\"],[0,[],0,\" is where we set the \"],[0,[3],1,\"top-level\"],[0,[],0,\" URLs for our projects. Remember: Django projects are intended to be broken up into individual modules, so this file usually reserves a URL for each module, with modules handling their \"],[0,[3],1,\"own\"],[0,[],0,\" independent URL routers. \"]],[[0,[2],1,\"wsgi.py\"],[0,[],0,\" where we point webservers like Nginx, Caddy, or whatever to serve our site. You\\'ll probably never need to touch this.\"]]]],[1,\"h3\",[[0,[],0,\"manage.py\"]]],[1,\"p\",[[0,[],0,\"We briefly glossed over the other thing created we created when we ran \"],[0,[4],1,\"django-admin\"],[0,[],0,\": \"],[0,[2],1,\"manage.py\"],[0,[],0,\". This file is the key to the kingdom: it contains logic covering everything related to \u201cmanaging\u201d our project. For example:\"]]],[3,\"ul\",[[[0,[4],1,\"python3 manage.py runserver\"],[0,[],0,\" deploys our app in \\\\\"development mode\\\\\" so that we may access it via our browser (this will be accessible via \"],[0,[2],1,\"localhost\"],[0,[],0,\" by default).\"]],[[0,[4],1,\"python3 manage.py migrate\"],[0,[],0,\" updates your project\\'s database tables to match the data models you\\'ve defined.\"]],[[0,[4],1,\"python3 manage.py startapp [MY_APP_NAME]\"],[0,[],0,\" is the equivalent of \"],[0,[4],1,\"django-admin startproject [YOUR_PROJECT_NAME]\"],[0,[],0,\". Indeed, \"],[0,[3],1,\"django-admin\"],[0,[],0,\" is simply an alias for \"],[0,[3],1,\"manage.py!\"]]]],[1,\"p\",[[0,[],0,\"Definitely check out what \"],[0,[2],1,\"manage.py\"],[0,[],0,\" can do by running \"],[0,[4,4],1,\"python3 manage.py\"],[0,[],1,\" --help\"],[0,[],0,\" to list all \"],[0,[6],1,\"commands\"],[0,[],0,\" some other time. For now, we have a job to do: let\\'s make an app. \"]]],[1,\"p\",[[0,[],0,\"So far, all our app can do is serve a generic canned page confirmed that Django was installed correctly. Let\\'s confirm all is good:\"]]],[10,7],[1,\"p\",[[0,[],0,\"Now open your browser and check out \"],[0,[7],1,\"http://127.0.0.1:8000/\"],[0,[],0,\":\"]]],[10,8],[1,\"p\",[[0,[],0,\"Seeing this page is a beautiful thing, but we\u2019ve only barely started to lay the groundwork for a respectable app. Django development truly begins with its configuration, but don\\'t gloss over this just because it sounds boring: setting up Django reveals everything about how the framework works as a whole\"],[0,[2],1,\".\"]]],[1,\"h2\",[[0,[],0,\"Settings.py: The Gist of Django\"]]],[1,\"p\",[[0,[],0,\"The top section of \"],[0,[2],1,\"settings.py\"],[0,[],0,\" contains configuration variables that Django absolutely depends on to function. Without any modifications, this section should look as follows:\"]]],[10,9],[1,\"p\",[[0,[2],1,\"SECRET_KEY\"],[0,[],0,\" is a concept you might already be familiar with: in short, this is a random string of characters that Django uses to encrypt sensitive information passed around the app. This is automatically generated for you, but please, for the love of Steve Buscemi, just don\\'t share it with anybody.\"]]],[1,\"p\",[[0,[],0,\"Sometimes we make mistakes when writing code, and it isn\\'t always easy to figure out what when wrong.\"],[0,[2],1,\" \"],[0,[],0,\"With\"],[0,[2],1,\" DEBUG \"],[0,[],0,\"enabled, any parts of your app which throw errors will serve you a detailed error report of what went wrong.\"]]],[1,\"p\",[[0,[2],1,\"ALLOWED_HOSTS \"],[0,[],0,\"seems comically understated, as it is \"],[0,[3],1,\"the\"],[0,[],0,\" most important variable we to get Django working. When Django is running, ALLOWED_HOSTS serves as a whitelist for which traffic pointing to your app it will actually acknowledge. You could have Nginx perfectly configured to point to your Django app, but if the traffic source from Nginx isn\\'t present in ALLOWED_HOSTS, your app will not be accessible. \"]]],[1,\"p\",[[0,[],0,\"We\\'re going to run our app locally, so we should include \\\\\"hosts\\\\\" synonymous with your local machine:\"]]],[10,10],[1,\"p\",[[0,[],0,\"It\\'s a bit curious that hosts like \"],[0,[2],1,\"localhost\"],[0,[],0,\" aren\\'t present here by default. Whatever.\"]]],[1,\"p\",[[0,[],0,\"If you were building an app to be served at a domain like \"],[0,[2],1,\"example.com\"],[0,[],0,\", you\\'d include that hostname in your allowed hosts like so:\"]]],[10,11],[1,\"p\",[[0,[],0,\"Next in our configuration is \"],[0,[2],1,\"INSTALLED_APPS\"],[0,[],0,\". This one is a doozy; remember when we mentioned Django being a collection of modules called \\\\\"apps\\\\\"? When we create an app in Django, we need to add it to INSTALLED_APPS to actually be recognized and served in our project. The admittedly strange part about this is that Django considers its own core features to be called \\\\\"apps\\\\\" as well, which is why we see things like Django\\'s admin library pre-populated here. It\\'s not intuitive. We\\'ll come back to this after making our first \\\\\"app\\\\\" in a moment.\"]]],[1,\"h3\",[[0,[],0,\"Setting up a Database\"]]],[1,\"p\",[[0,[],0,\"Django really, really wants you to configure a database upfront, even if you aren\\'t going to use it right away. In fact, running \"],[0,[4],1,\"manage.py runserver\"],[0,[],0,\" without setting a database will \"],[0,[3],1,\"automatically create an SQLite database by default\"],[0,[],0,\". That\\'s because the database section of \"],[0,[2],1,\"settings.py\"],[0,[],0,\" starts off like this:\"]]],[10,12],[1,\"p\",[[0,[],0,\"Take special notice to the \"],[0,[2],1,\"ENGINE\"],[0,[],0,\" key and how it specifies that we\\'re using an SQLite database. This is Django using its internal SQLite connector to connect to our database. We aren\\'t limited to SQLite, however; any of the following database flavors are supported out of the box:\"]]],[3,\"ul\",[[[0,[4],1,\"\\'django.db.backends.mysql\\'\"],[0,[],0,\" (includes MariaDB in Django 3)\"]],[[0,[4],1,\"\\'django.db.backends.postgresql\\'\"]],[[0,[4],1,\"\\'django.db.backends.sqlite3\\'\"]],[[0,[4],1,\"\\'django.db.backends.oracle\\'\"]]]],[1,\"p\",[[0,[],0,\"We won\\'t be needing a database for our intro app, but if we hypothetically wanted our app to use a MySQL database, our config might look something like this:\"]]],[10,13],[1,\"p\",[[0,[],0,\"Even though we specify \"],[0,[4],1,\"\\'ENGINE\\': \\'django.db.backends.mysql\\'\"],[0,[],0,\", we still need to install the MySQL connector that Django expects, which happens to be \"],[0,[4],1,\"mysqlclient\"],[0,[],0,\". I don\\'t understand why, and I\\'d rather move the reasons why this is annoying:\"]]],[10,14],[1,\"h3\",[[0,[],0,\"Logging\"]]],[1,\"p\",[[0,[],0,\"Configuring logging is optional, but I\\'d recommend configuring this to keep a record of things gone wrong. Feel free to steal my configuration below:\"]]],[10,15],[1,\"h3\",[[0,[],0,\"Static Files\"]]],[1,\"p\",[[0,[],0,\"In the spirit of backend developers disrespecting frontend code, Django refers to all frontend code (such as JS, CSS, images, etc.) as \\\\\"static files.\\\\\" The term seems to imply that the product of frontend development is an afterthought to be tossed into a folder and forgotten, but whatever; we backed developers aren\\'t exactly heralded for our camaraderie or social skills.\"]]],[1,\"p\",[[0,[],0,\"We\\'ll keep all static files in one place for the purposes of \"],[0,[3],1,\"our\"],[0,[],0,\" app, but it\\'s otherwise somewhat common for Django apps to each contain their own styles and JavaScript. Our simple configuration looks like this:\"]]],[10,16],[1,\"p\",[[0,[],0,\"This means that our \\\\\"master node\\\\\" app, \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\", will host all of our CSS and what-not in a subdirectory called \"],[0,[2],1,\"/static\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Extra Settings\"]]],[1,\"p\",[[0,[],0,\"There are a lot more things we \"],[0,[3],1,\"could\"],[0,[],0,\" add to \"],[0,[2],1,\"settings.py\"],[0,[],0,\" ranging from email settings, file uploads, security tokens, whatever, If you\\'d like to explore those things, be my guest and \"],[0,[8],1,\"read the documentation\"],[0,[],0,\". The one variable I \"],[0,[3],1,\"will\"],[0,[],0,\" call out, however, is \"],[0,[2],1,\"APPEND_SLASH\"],[0,[],0,\". Enforcing slashes on URLs is dope as hell, so you should totally do this unless you\\'re some kind of weirdo:\"]]],[10,17],[1,\"h2\",[[0,[],0,\"Templates and Static Assets\"]]],[1,\"p\",[[0,[],0,\"Quick recap: Django projects are made up of modules called \\\\\"apps.\\\\\" Of these apps, there is always a \\\\\"master\\\\\" app that contains settings, logic, and anything to be shared across all child apps. \"]]],[1,\"p\",[[0,[],0,\"Page templates and static assets are among the things we can choose to share between apps in a Django project: If every part of our project is going to share the same base styles or the same HTML meta headers, we can opt to keep those things in \"],[0,[2],1,\"tutorialapp\"],[0,[],0,\" for our other apps to use. We\\'ll keep our site-wide styles and images in a directory named \"],[0,[2],1,\"/static,\"],[0,[],0,\" and our base page template in \"],[0,[2],1,\"/templates\"],[0,[],0,\". \"]]],[1,\"h3\",[[0,[],0,\"Our Base Page Template\"]]],[1,\"p\",[[0,[],0,\"If you aren\\'t familiar with page templating systems like Handlebars or Jinja, I\\'m gonna have to leave you in the dark here to keep moving. Take a few minutes to read up on \"],[0,[9],1,\"Jinja\"],[0,[],0,\" when you can.\"]]],[1,\"p\",[[0,[],0,\"Every page of most sites shares roughly the same boilerplate of meta tags and so forth. Instead of duplicating boilerplate every time we make a new page, we\\'ll create a \\\\\"base\\\\\" page called \"],[0,[2],1,\"layout.html\"],[0,[],0,\" which we\\'ll use to load other page templates into:\"]]],[10,18],[1,\"p\",[[0,[],0,\" \"],[0,[4],1,\"{% load static %}\"],[0,[],0,\" tells Django to look for our static files in our static folder. It\\'s a bit redundant, but whatever. Once that\\'s done, we can load in assets like stylesheets as we do with \"],[0,[4],1,\"{% static \\'css/styles.css\\' %}\"]]],[1,\"p\",[[0,[],0,\"With that done, \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" now looks like this: \"]]],[10,19],[1,\"h2\",[[0,[],0,\"Making a Django \\\\\"App\\\\\"\"]]],[1,\"p\",[[0,[],0,\"We\\'re roughly 3000 words deep into this tutorial and we haven\\'t even written any meaningful logic yet. I wasn\\'t kidding when I said Django was rigid, but the good news is getting set up is the hardest part: everyday Django development is far more straightforward than what we\\'ve dealt with so far.\"]]],[1,\"p\",[[0,[4],1,\"cd\"],[0,[],0,\" back into the top-level directory which contains \"],[0,[2],1,\"manage.py\"],[0,[],0,\". We\\'ll create our first app by using this command:\"]]],[10,20],[1,\"p\",[[0,[3],1,\"Now\"],[0,[],0,\" we can start writing actual business logic. Remember: our goal is to serve a single-page application. Eyes on the prize here, folks.\"]]],[1,\"p\",[[0,[],0,\"I used the \"],[0,[4],1,\"startapp\"],[0,[],0,\" command to create a Django app named \"],[0,[2],1,\"myapp\"],[0,[],0,\". Here\\'s what came out of it:\"]]],[10,21],[1,\"p\",[[0,[],0,\"Models? Views? Things are starting to feel more MVC already. Here are the broad strokes of what makes a Django app tick:\"]]],[3,\"ul\",[[[0,[2],1,\"models.py\"],[0,[],0,\" is where we\\'d store database models for Django\\'s ORM. For the scope of this tutorial, we aren\\'t going to bother with database interactions. By the time we actually manage to serve a page template, we\\'ll both be too burnt out to function anyway.\"]],[[0,[2],1,\"views.py\"],[0,[],0,\" is where we handle building and serving \\\\\"views\\\\\" to users - more on this in a moment.\"]],[[0,[2],1,\"urls.py\"],[0,[],0,\" is actually missing here, but it\\'s expected that any Django app intending to \\\\\"serve\\\\\" pages or endpoints will have them. Setting \\\\\"urls\\\\\" is equivalent to setting routes: this is where we tell Django to serve view X when visiting URL Y.\"]]]],[1,\"p\",[[0,[],0,\"To make our first page, we\\'ll start by creating a view in \"],[0,[2],1,\"views.py\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Creating a Homepage\"]]],[1,\"p\",[[0,[],0,\"A \"],[0,[3],1,\"view\"],[0,[],0,\" is simply \\\\\"something to serve to a user at a given URL.\\\\\" When a user requests a URL from whichever domain Django is hosted on, Django looks through its collection of routes (the stuff in \"],[0,[2],1,\"urls.py\"],[0,[],0,\") to see if the requested URL is associated with a \"],[0,[3],1,\"view\"],[0,[],0,\". If an association exists, Django passes information about the requester to the view function, and the user is served a response (like a web page). Here\\'s what a simple view looks like:\"]]],[10,22],[1,\"p\",[[0,[],0,\"The only \\\\\"magic\\\\\" happening here is thanks to two things Django provides to us: the \"],[0,[4],1,\"request\"],[0,[],0,\" object and the \"],[0,[4],1,\"render\"],[0,[],0,\" function:\"]]],[3,\"ul\",[[[0,[2],1,\"request\"],[0,[],0,\" is an object inherently passed to a view whenever a view is requested. \"],[0,[4],1,\"request\"],[0,[],0,\" contains metadata about the incoming request such as headers, parameters, HTTP method, etc. Most views would use this metadata as a way to serve responses contextually, but we\\'re not going to do anything special today.\"]],[[0,[2],1,\"render\"],[0,[],0,\" builds a response to serve to users. In this case, we\\'re returning a page template called \"],[0,[3],1,\"index.html, \"],[0,[],0,\"as well as a few variables to render with our page dynamically.\"]]]],[1,\"p\",[[0,[],0,\"So our view is set to return a template at \"],[0,[2],1,\"myapp/index.html\"],[0,[],0,\", but that template doesn\\'t actually exist yet. We need to create a \"],[0,[2],1,\"templates\"],[0,[],0,\" folder in our \\\\\"myapp\\\\\" module. Django looks for templates here in a way that isn\\'t \"],[0,[3],1,\"entirely\"],[0,[],0,\" intuitive. Check out our app\\'s folder structure after we add a template and corresponding stylesheet:\"]]],[10,23],[1,\"p\",[[0,[],0,\" Yes, our \"],[0,[2],1,\"/templates\"],[0,[],0,\" folder contains a subdirectory named \"],[0,[2],1,\"/myapp\"],[0,[],0,\",\"],[0,[2],1,\" \"],[0,[],0,\"which\"],[0,[2],1,\" \"],[0,[],0,\"matches the name of the Django app. This a Django thing, and it\\'s admittedly a bit confusing.\"]]],[1,\"p\",[[0,[],0,\"Moving on to \"],[0,[2],1,\"index.html\"],[0,[],0,\", all we need to do here is extend the \"],[0,[2],1,\"layout.html\"],[0,[],0,\" template we made earlier and fill in some content. We\\'ll load in the attributes we passed in our view to keep things interesting:\"]]],[10,24],[1,\"p\",[[0,[],0,\"Values in double brackets (\"],[0,[4],1,\"{{title}}\"],[0,[],0,\", \"],[0,[4],1,\"{{template}}\"],[0,[],0,\", and \"],[0,[4],1,\"{{description}}\"],[0,[],0,\") will be replaced with the values of the matching keys in the dictionary we created in our index view. Then, the entirety of our block named \\\\\"content\\\\\" will get loaded into the space we reserved in \"],[0,[2],1,\"layout.html\"],[0,[],0,\" for the very same block name.\"]]],[1,\"h3\",[[0,[],0,\"Setting a URL Route\"]]],[1,\"p\",[[0,[2],1,\"myapp\"],[0,[],0,\" now has a view, as well as a corresponding template. The only thing missing is specifying which URL should \"],[0,[3],1,\"route\"],[0,[],0,\" to this view. Go ahead and create \"],[0,[2],1,\"urls.py\"],[0,[],0,\":\"]]],[10,25],[1,\"p\",[[0,[4],1,\"urlpatterns\"],[0,[],0,\" is a list of \"],[0,[4],1,\"path\"],[0,[],0,\"s, where each \"],[0,[4],1,\"path\"],[0,[],0,\" consists of three parameters:\"]]],[3,\"ol\",[[[0,[],0,\"The URL pattern to serve our view at. This always takes the form of a regex pattern. In our example, we want our view to be the homepage, therefore providing an empty string tells Django to serve our view at our site\\'s root.\"]],[[0,[],0,\"The view we created in \"],[0,[2],1,\"views.py\"],[0,[],0,\". This is the view that will be served to the user when visiting the URL pattern specified above.\"]],[[0,[],0,\"The \\\\\"name\\\\\" of our route. Giving our route a name is an easy way to reference URL patterns later on.\"]]]],[1,\"p\",[[0,[2],1,\"urls.py\"],[0,[],0,\" allows us to set different URLs pointing to the same view, meaning we can serve the same view at different URLs. For example, here\\'s how we can expand \"],[0,[4],1,\"urlpatterns\"],[0,[],0,\" to serve the same page at different URLs:\"]]],[10,26],[1,\"p\",[[0,[],0,\"Django will now respect three different routes to serve our homepage: \"],[0,[4],1,\"/home\"],[0,[],0,\", \"],[0,[4],1,\"/home?user=todd\"],[0,[],0,\", and our root (aka \"],[0,[4],1,\"/\"],[0,[],0,\"). The last example is a way to specify query string parameters to our view, which is a good way to offer context to our views for more dynamic content. \"]]],[1,\"p\",[[0,[],0,\"It\\'s worth noting that we\\'re allowed to specify the same name for each of these routes, even though they can technically accept URLs.\"]]],[1,\"h2\",[[0,[],0,\"Activating myapp\"]]],[1,\"p\",[[0,[],0,\"Our app is almost ready! There\\'s one thing left to do... remember the list of \"],[0,[4],1,\"INSTALLED_APPS\"],[0,[2],1,\" \"],[0,[],0,\"that lives in \"],[0,[2],1,\"settings.py\"],[0,[],0,\"? We still need to add our app here before Django respects it: \"]]],[10,27],[1,\"p\",[[0,[],0,\"We\\'re almost there, folks. Our app is good-to-go, and it\\'s been sufficiently \\\\\"installed.\\\\\" The only thing left is tell our core Django app to listen to the urls \"],[0,[2],1,\"myapp/urls.py\"],[0,[],0,\" in our main module. To do this, we need to modify our core Django app\\'s \"],[0,[2],1,\"urls.py\"],[0,[],0,\" to look something like this:\"]]],[10,28],[1,\"p\",[[0,[],0,\"This probably seems confusing as shit, but the good news is \"],[0,[2,3],2,\"we\\'re done! \"],[0,[],0,\"Let\\'s wrap our heads around this before we see our app in action.\"]]],[1,\"p\",[[0,[],0,\"Any time a user visits our deployed Django server (at 127.0.0.1:8000 in our case),   our \\\\\"master app\\\\\" \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"picks up the incoming traffic. \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"compares the URL the user provided to its list of URLs in \"],[0,[2],1,\"urls.py\"],[0,[],0,\", and if a match is found, the user is then directed accordingly. In our example, we\\'re expecting users only to visit the homepage (AKA the root directory, AKA \"],[0,[4],1,\"/\"],[0,[],0,\"), which is why our url is seen as an empty string. Our \"],[0,[2],1,\"urls.py\"],[0,[],0,\" file tells \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"to \"],[0,[3],1,\"defer \"],[0,[],0,\"traffic coming to this URL to \"],[0,[2],1,\"myapp\"],[0,[],0,\", which then takes over from there. The end result is effectively a route that points to another route, which points to a view, which happens to serve our homepage. Run \"],[0,[4],1,\"python manage.py runserver\"],[0,[],0,\" to see for yourself:\"]]],[10,29],[1,\"h2\",[[0,[],0,\"I Hope Somebody Actually Read This\"]]],[1,\"p\",[[0,[],0,\"I\\'ve you\\'ve managed to survive this long, you\\'re probably feeling a lot of emotions right now. Fatigue, pride, confusion, hope... perhaps all of the above. This is normal, especially if you happen to be a newcomer to MVC (in which case I\\'m sorry that you landed \"],[0,[3],1,\"here\"],[0,[],0,\" of all places).\"]]],[1,\"p\",[[0,[],0,\"Make no mistake: Django is no joke. The power of a fully-featured web framework comes with a lot of shit to unpack, but the feeling of  overwhelming complexity fades quickly as these patterns become more familiar. As with all things software related, it takes a bit of fussing around before the concepts of Django truly \\\\\"click.\\\\\" For that reason, I\\'ve gone ahead and uploaded the source code for this tutorial to Github for you to pull down and mess around with. You might just be surprised by what you come up with.\"]]],[10,30],[1,\"p\",[]]]}', 'comment_id': '5a101454d201b772c140d36e', 'feature_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'featured': False, 'status': 'published', 'visibility': 'public', 'created_at': '2017-11-18T11:07:00.000Z', 'updated_at': '2020-11-13T16:17:02.000Z', 'published_at': '2019-12-04T17:49:00.000Z', 'custom_excerpt': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'codeinjection_head': None, 'codeinjection_foot': None, 'custom_template': None, 'canonical_url': None, 'send_email_when_published': False, 'authors': [{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T19:46:04.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T19:46:04.000Z', 'url': 'https://hackersandslackers.app/author/todd/'}], 'primary_author': {'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T19:46:04.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T19:46:04.000Z', 'url': 'https://hackersandslackers.app/author/todd/'}, 'url': 'https://hackersandslackers.app/getting-started-django/', 'excerpt': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'og_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'og_title': 'Getting Started with Django', 'og_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'twitter_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'twitter_title': 'Getting Started with Django', 'twitter_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'meta_title': 'Getting Started with Django', 'meta_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'email_subject': 'Getting Started with Django'}]}", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:17", "message": "Fetched Ghost post `getting-started-django` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5bf92)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:55", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:55", "message": "https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5bf92", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:55", "message": "{'posts': [{'id': '5dc42cb812c9ce0d63f5bf92', 'uuid': '77609409-5552-418d-b742-c549a2ccf01b', 'title': 'Getting Started with Django', 'slug': 'getting-started-django', 'mobiledoc': '{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://res-4.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/11/django-popularity.jpg\",\"caption\":\"General in MVC frameworks over 6 years.\"}],[\"html\",{\"html\":\"<div class=\\\\\"subtext\\\\\">\\\\n* This is a meaningless claim. Nothing we\u2019ll cover has changed from Django 2.x, but claiming this achievement makes my life appear less meaningless.\\\\n</div>\"}],[\"code\",{\"code\":\"# Create virtual environment\\\\n$ python3.8 -m venv .venv\\\\n\\\\n# Activate virtual environment\\\\n$ . .venv/bin/activate\\\\n\\\\n# Install django in virtual environment\\\\n$ pip install django    \",\"language\":\"shell\"}],[\"code\",{\"code\":\"$ python3 -m django --version\\\\n>> 3.0\",\"language\":\"shell\",\"caption\":\"Check your version of Django\"}],[\"code\",{\"code\":\"$ django-admin startproject [YOUR_PROJECT_NAME]\",\"language\":\"shell\",\"caption\":\"Start a new Django project\"}],[\"code\",{\"code\":\"/djangotutorial\\\\n  \u251c\u2500\u2500 /djangotutorial\\\\n  \u2502   \u251c\u2500\u2500 __init__.py\\\\n  \u2502   \u251c\u2500\u2500 settings.py\\\\n  \u2502   \u251c\u2500\u2500 urls.py\\\\n  \u2502   \u2514\u2500\u2500 wsgi.py\\\\n  \u2514\u2500\u2500 manage.py\",\"language\":\"shell\",\"caption\":\"File structure of our new app\"}],[\"image\",{\"caption\":\"Example Django project structure.\",\"src\":\"https://res-4.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django-project.png\"}],[\"code\",{\"code\":\"$ python3 manage.py runserver\\\\n\\\\nWatching for file changes with StatReloader\\\\nPerforming system checks...\\\\n\\\\nSystem check identified no issues (0 silenced).\\\\nDecember 04, 2019 - 23:18:54\\\\nDjango version 3.0, using settings \\'djangotutorial.settings\\'\\\\nStarting development server at http://127.0.0.1:8000/\\\\nQuit the server with CONTROL-C.\\\\n\",\"language\":\"shell\",\"caption\":\"Output of running Django\\'s \\\\\"development\\\\\" server\"}],[\"image\",{\"src\":\"https://res-1.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django_helloworld_runserver.png\",\"caption\":\"Django\\'s installation confirmation screen\"}],[\"code\",{\"code\":\"import os\\\\n\\\\n# SECURITY WARNING: keep the secret key used in production secret!\\\\nSECRET_KEY = \\'$HVG687rTFDuYdtfg8yiuf87fuib&)lw#6btg5_p\\'\\\\n\\\\n# SECURITY WARNING: don\\'t run with debug turned on in production!\\\\nDEBUG = True\\\\n\\\\nALLOWED_HOSTS = []\\\\n\\\\n# Application definition\\\\nINSTALLED_APPS = [\\\\n    \\'django.contrib.admin\\',\\\\n    \\'django.contrib.auth\\',\\\\n    \\'django.contrib.contenttypes\\',\\\\n    \\'django.contrib.sessions\\',\\\\n    \\'django.contrib.messages\\',\\\\n    \\'django.contrib.staticfiles\\',\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"ALLOWED_HOSTS = [\\\\n    \\'0.0.0.0\\',\\\\n    \\'127.0.0.1\\',\\\\n    \\'localhost\\',\\\\n    \\'127.0.0.1:8000\\'\\\\n]\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"ALLOWED_HOSTS = [\\\\n    \\'0.0.0.0\\',\\\\n    \\'127.0.0.1\\',\\\\n    \\'localhost\\',\\\\n    \\'127.0.0.1:8000\\',\\\\n    \\'example.com\\'\\\\n ]\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Database\\\\nDATABASES = {\\\\n    \\'default\\': {\\\\n        \\'ENGINE\\': \\'django.db.backends.sqlite3\\',\\\\n        \\'NAME\\': os.path.join(BASE_DIR, \\'db.sqlite3\\'),\\\\n    }\\\\n}\\\\n\\\\n...\",\"language\":\"python\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Database\\\\nDATABASES = {\\\\n    \\'default\\': {\\\\n        \\'ENGINE\\': \\'django.db.backends.mysql\\',\\\\n        \\'NAME\\': \\'myDatabase\\',\\\\n        \\'USER\\': \\'root\\',\\\\n        \\'PASSWORD\\': \\'password123\\',\\\\n        \\'HOST\\': \\'534.13.356.35\\',\\\\n        \\'PORT\\': \\'3306\\',\\\\n    }\\\\n}\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"$ pip3 install mysqlclient\",\"language\":\"python\",\"caption\":\"Install a Python library to connect to MySQL\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Logging\\\\nLOGGING = {\\\\n    \\'version\\': 1,\\\\n    \\'disable_existing_loggers\\': False,\\\\n    \\'handlers\\': {\\\\n        \\'file\\': {\\\\n            \\'level\\': \\'DEBUG\\',\\\\n            \\'class\\': \\'logging.FileHandler\\',\\\\n            \\'filename\\': \\'logs/debug.log\\',\\\\n        },\\\\n    },\\\\n    \\'loggers\\': {\\\\n        \\'django\\': {\\\\n            \\'handlers\\': [\\'file\\'],\\\\n            \\'level\\': \\'DEBUG\\',\\\\n            \\'propagate\\': True,\\\\n        },\\\\n    },\\\\n}\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Static files (CSS, JavaScript, Images)\\\\nSTATIC_URL = \\'/static/\\'\\\\nSTATICFILES_DIRS = [\\\\n    os.path.join(PROJECT_DIR, \\\\\"static\\\\\")\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"APPEND_SLASH = True\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"{% load static %}\\\\n\\\\n<!DOCTYPE html>\\\\n<html lang=\\\\\"en\\\\\">\\\\n\\\\n<head>\\\\n<title>{{title}}</title>\\\\n  <meta charset=\\\\\"utf-8\\\\\" />\\\\n  <meta name=\\\\\"description\\\\\" content=\\\\\"This is a description\\\\\">\\\\n  <meta name=\\\\\"HandheldFriendly\\\\\" content=\\\\\"True\\\\\" />\\\\n  <meta name=\\\\\"viewport\\\\\" content=\\\\\"width=device-width, initial-scale=1.0, viewport-fit=cover\\\\\" />\\\\n  <meta name=\\\\\"theme-color\\\\\" content=\\\\\"#5eb9d7\\\\\">\\\\n  <link rel=\\\\\"apple-touch-icon\\\\\" href=\\\\\"icon.png\\\\\">\\\\n  <link rel=\\\\\"stylesheet\\\\\" href=\\\\\"https://use.typekit.net/uqq2lcv.css\\\\\">\\\\n  <link href=\\\\\"{% static \\'css/styles.css\\' %}\\\\\" rel=\\\\\"stylesheet\\\\\" type=\\\\\"text/css\\\\\">\\\\n</head>\\\\n\\\\n<body class=\\\\\"{{template}}\\\\\">\\\\n    {% block content %}{%  endblock %}\\\\n</body>\\\\n\\\\n</html>\\\\n\",\"language\":\"jinja2\",\"caption\":\"layout.html\"}],[\"code\",{\"code\":\"/djangotutorial\\\\n\u251c\u2500\u2500 /static\\\\n\u2502   \u251c\u2500\u2500 /css\\\\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\\\\n\u2502   \u2514\u2500\u2500 /img\\\\n\u2502       \u2514\u2500\u2500 logo.png\\\\n\u251c\u2500\u2500 /templates\\\\n\u2502   \u2514\u2500\u2500 layout.html\\\\n\u251c\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 settings.py\\\\n\u251c\u2500\u2500 urls.py\\\\n\u2514\u2500\u2500 wsgi.py\",\"language\":\"shell\",\"caption\":\"<code>/djangotutorial</code> directory\"}],[\"code\",{\"code\":\"$ django-admin startapp [YOUR_APP_NAME]\",\"language\":\"shell\",\"caption\":\"Create a Django \\\\\"app\\\\\"\"}],[\"code\",{\"code\":\"/myapp\\\\n  \u251c\u2500\u2500 __init__.py\\\\n  \u251c\u2500\u2500 admin.py\\\\n  \u251c\u2500\u2500 apps.py\\\\n  \u251c\u2500\u2500 /migrations\\\\n  \u2502   \u2514\u2500\u2500 __init__.py\\\\n  \u251c\u2500\u2500 models.py\\\\n  \u251c\u2500\u2500 tests.py\\\\n  \u2514\u2500\u2500 views.py\",\"language\":\"shell\",\"caption\":\"Basic structure of a Django \\\\\"app\\\\\"\"}],[\"code\",{\"code\":\"from django.shortcuts import render\\\\n\\\\n\\\\ndef index(request):\\\\n    context = {\\\\n        \\'template\\': \\'homepage\\',\\\\n        \\'title\\': \\'My Django App\\',\\\\n        \\'description\\': \\'You\\\\\\\\\\'ve launched your first Django app!\\'\\\\n    }\\\\n    return render(request, \\'myapp/index.html\\', context)\",\"language\":\"python\",\"caption\":\"views.py\"}],[\"code\",{\"code\":\"/myapp\\\\n\u251c\u2500\u2500 /templates\\\\n\u2502\\xa0\\xa0 \u2514\u2500\u2500 /myapp\\\\n\u2502\\xa0\\xa0     \u2514\u2500\u2500 index.html\\\\n\u251c\u2500\u2500 /migrations\\\\n\u2502\\xa0\\xa0 \u2514\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 __init__.py\\\\n\u251c\u2500\u2500 admin.py\\\\n\u251c\u2500\u2500 apps.py\\\\n\u251c\u2500\u2500 models.py\\\\n\u251c\u2500\u2500 tests.py\\\\n\u2514\u2500\u2500 views.py\",\"language\":\"shell\",\"caption\":\"Django app containing page templates\"}],[\"code\",{\"code\":\"{% extends \\'layout.html\\' %}\\\\n{% load static %}\\\\n\\\\n{% block content %}\\\\n    <div class=\\\\\"card\\\\\">\\\\n        <img src=\\\\\"{% static \\'img/logo.png\\' %}\\\\\" alt=\\\\\"logo\\\\\" class=\\\\\"logo\\\\\" />\\\\n        <h1>Hello world!</h1>\\\\n        <p>{{ description }}</p>\\\\n    </div>\\\\n{%  endblock %}\\\\n\",\"language\":\"jinja2\",\"caption\":\"index.html\"}],[\"code\",{\"code\":\"from django.urls import path\\\\n\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path(\\'\\', views.index, name=\\'index\\'),\\\\n]\",\"language\":\"python\",\"caption\":\"urls.py\"}],[\"code\",{\"code\":\"...\\\\n\\\\nurlpatterns = [\\\\n    path(\\'\\', views.index, name=\\'index\\'),\\\\n    path(r\\'^home/$\\', views.index, name=\\'index\\'),\\\\n    path(r\\'^home/(?P<user>\\\\\\\\w+)$\\', views.index, name=\\'index\\'),\\\\n]\",\"caption\":\"urls.py\",\"language\":\"python\"}],[\"code\",{\"code\":\"...\\\\n\\\\n# Application definition\\\\nINSTALLED_APPS = [\\\\n    \\'django.contrib.admin\\',\\\\n    \\'django.contrib.auth\\',\\\\n    \\'django.contrib.contenttypes\\',\\\\n    \\'django.contrib.sessions\\',\\\\n    \\'django.contrib.messages\\',\\\\n    \\'django.contrib.staticfiles\\',\\\\n    \\'myapp\\',\\\\n]\\\\n\\\\n...\",\"language\":\"python\",\"caption\":\"settings.py\"}],[\"code\",{\"code\":\"from django.contrib import admin\\\\nfrom django.urls import path, include\\\\n\\\\nurlpatterns = [\\\\n    path(\\'admin/\\', admin.site.urls),\\\\n    path(\\'\\', include(\\'myapp.urls\\')),\\\\n]\\\\n\",\"language\":\"python\",\"caption\":\"djangotutorial/urls.py\"}],[\"image\",{\"src\":\"https://res-5.cloudinary.com/hackers/image/upload/q_auto:best/v1/2019/12/django-homepage.png\",\"caption\":\"Our live homepage served by Django.\"}],[\"bookmark\",{\"type\":\"bookmark\",\"url\":\"https://github.com/hackersandslackers/django-intro-tutorial\",\"metadata\":{\"url\":\"https://github.com/hackersandslackers/django-intro-tutorial\",\"title\":\"hackersandslackers/django-intro-tutorial\",\"description\":\"\ud83d\ude80\u2705 Get started with Django by building your first web app. - hackersandslackers/django-intro-tutorial\",\"author\":\"hackersandslackers\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://repository-images.githubusercontent.com/225977066/21fbe900-1719-11ea-90cc-536b180a5e0d\",\"icon\":\"https://github.githubassets.com/favicon.ico\"}}]],\"markups\":[[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Adrian_Holovaty\"]],[\"a\",[\"href\",\"https://jacobian.org/\"]],[\"strong\"],[\"em\"],[\"code\"],[\"a\",[\"href\",\"https://hackersandslackers.app/pipenv-python-environment-management/\"]],[\"a\",[\"href\",\"https://docs.djangoproject.com/en/2.2/ref/django-admin/\"]],[\"a\",[\"href\",\"http://127.0.0.1:8000/\"]],[\"a\",[\"href\",\"https://docs.djangoproject.com/en/2.2/ref/settings/#databases\"]],[\"a\",[\"href\",\"https://hackersandslackers.app/flask-page-templates-jinja/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"There isn\\'t much I can say that hasn\\'t already been said about Django: the granddaddy of all web frameworks. I owe a large part of my engineering career to learning Django on a whim in 2012. Django was a surprisingly elegant take on MVC, written in a programming language that was far from mainstream at the time of Django\\'s inception. Most of us have surely forgotten what it was like to learn 1) programming language, 2) a framework, and 3) an entire programming paradigm, all at the same time. In the face of that challenge, \"],[0,[0],1,\"Adrian Holovaty\"],[0,[],0,\" and \"],[0,[1],1,\"Jacob Kaplan-moss\"],[0,[],0,\" produced a phenomenal book dubbed \"],[0,[2],1,\"The Definitive Guide To Django\"],[0,[],0,\", which artfully articulated all of those things simultaneously. I believe the book is now either free or serves as Django\\'s official documentation. Without those who created Django and championed its mainstream popularity, our website of sloppy Python tutorials surely would not exist today.\"]]],[1,\"p\",[[0,[],0,\"To say a lot has happened since 2012 would be the understatement of the decade. Staying within the topic of software, some might remember the prophecy of \"],[0,[2],1,\"Ruby on Rails\"],[0,[],0,\" eating the world. It was a popular sentiment which coincidentally took rise while Guido Von Rossen \"],[0,[3],1,\"enraged\"],[0,[],0,\" the Python community with the announcement of \"],[0,[2],1,\"Python 3 \"],[0,[],0,\"(which was, for the record, a completely necessary and reasonable course of action). My condolences to the families of developers lost to traumatic finger injuries, as they were forced to rewrite their \"],[0,[4],1,\"print\"],[0,[],0,\" statements to include parenthesis. Pessimistic commentary surrounding the future of Python (and Django) was everywhere- even our elitist Hacker News overlords couldn\\'t help themselves from the phrase \u201cPython is dead\u201d (which I wholeheartedly hope somebody takes the time to create a meme collection of). It was a comedy of short-sighted hyperbole, or in other words, typical software engineer banter. That\\'s around the time when \"],[0,[2],1,\"#TeamRuby\"],[0,[],0,\" collapsed harder than the Soviet Union. The timing of new NodeJS frameworks served as safe-havens for refugees: lucky JavaScript developers now have an infinite supply of soon-to-be-obsolete frameworks to spend the rest of their lives with.\"]]],[1,\"p\",[[0,[],0,\"So why start writing Django tutorials \"],[0,[3],1,\"now?\"],[0,[],0,\" I\\'ve had a very public and notorious love affair with Flask for well over a year now... how does Django fit into this love triangle? Is this considered cheating?\"]]],[1,\"p\",[[0,[],0,\"Let\\'s consider the top complaints developers have about their profession. Perhaps the most common (and painfully cliche) complaint is that software professionals are pressured to learn \\\\\"countless frameworks\\\\\" to stay relevant in the industry. That surely feels like an unfortunate fate when compared to the non-technical office worker, who has learned exactly zero frameworks. Is there legitimacy to this complaint? Well, let\\'s start by looking at how a sample of how MVC frameworks have fared over the past six years:\"]]],[10,0],[1,\"p\",[[0,[],0,\"Google search trends aren\\'t flawlessly scientific, but it\\'s hard to deny Django\\'s resilient popularity. Django is the only example in this sample which is highly relevant in \"],[0,[3],1,\"both\"],[0,[],0,\" 2013 and 2019, and actually \"],[0,[3],1,\"gains\"],[0,[],0,\" interest over time to steal the #1 most Googled MVC framework in 2019. Different surveys will tell narratives, but there\\'s an undeniable truth worth recognizing: if a software developer spent their entire career developing exclusively in Django, they could comfortably retire from a successful career having learned only a single framework. In fact, \"],[0,[3],1,\"any\"],[0,[],0,\" of us could have chosen to do so, and still can. The mystery of human nature instead leads down self-destructive paths, hurting ourselves with diseases like Angular, or even worse, ASP.NET.\"]]],[1,\"p\",[[0,[],0,\"Anyway, welcome to Django 101. This post is the first in a series where we dissect Django from top-to-bottom for people in 2019. If you\\'ve ever felt the hopeless feeling that the world has an unfair 10-year head start doing something you love, this series is for you. Welcome to the family.\"]]],[1,\"h3\",[[0,[],0,\"A Note About Django Vs Flask\"]]],[1,\"p\",[[0,[],0,\"This comparison is bound to pop up, so let\u2019s get it out of the way.\"]]],[1,\"p\",[[0,[2],1,\"Flask\u2019s\"],[0,[],0,\" claim to fame is its zero-configuration quick-start, which contains seven lines of code and exactly zero bells-and-whistles. Flask prioritizes ease-of-entry over features, where \u201cfeatures\u201d are plugins (AKA Flask-specific Python libraries).\"]]],[1,\"p\",[[0,[2],1,\"Django\"],[0,[],0,\" is the antithesis to Flask\u2019s \u201cas-you-go\u201d philosophy of development. Batteries are included with Django to the extent where Django\u2019s batteries have batteries of their own. No amount of imagination could fathom a paradigm that Django doesn\\'t handle out of the box.\"]]],[1,\"p\",[[0,[],0,\"Flask is akin to the lean startup advocating agile, whereas Django is equivalent to an Enterprise behemoth in denial about using waterfall (this analogy is also a pretty accurate manifestation of who-uses-what). I\u2019ve found Flask to have a much easier learning curve, partially because Flask is \"],[0,[3],1,\"far less\"],[0,[],0,\" rigid than Django. Flask projects inherently have no sense of structure, whereas Django \"],[0,[3],1,\"forces\"],[0,[],0,\" developers into an organized paradigm. Flask projects have the ability to be structured similarly to Django, but cohesiveness becomes highly unlikely as your development team approaches hundreds of devs. This reason alone enough to perpetuate an assumption you probably already have: \u201cDjango for large projects, Flask for small projects.\u201d I\u2019m not suggesting this is entirely accurate, but it isn\u2019t \"],[0,[3],1,\"inaccurate\"],[0,[],0,\"  either.\"]]],[1,\"h2\",[[0,[],0,\"Getting Started\"]]],[1,\"p\",[[0,[],0,\"The goal of this tutorial is to create the simplest  possible Django application that provides \"],[0,[3],1,\"some sort of value\"],[0,[],0,\". Learning to print \u201cHello world\u201d is fine, but it\u2019s kind of a useless exercise in terms of learning the internals of a Framework. We\u2019ll instead focus on building an application that serves a single HTML page. It doesn\\'t sound like much, but you should walk away with a grasp of:\"]]],[3,\"ul\",[[[0,[],0,\"Installing and running Django locally\"]],[[0,[],0,\"Configuring Django settings properly\"]],[[0,[],0,\"Creating and managing \u201capp\u201d modules\"]],[[0,[],0,\"Serving templates via Django\u2019s native templating system\"]],[[0,[],0,\"Styling templates with static assets\"]],[[0,[],0,\"Routing in Django\"]]]],[1,\"p\",[[0,[],0,\"To make things interesting, I\u2019ll be walking through this with Django 3.0, which was actually released two days ago. You could very well be reading the first Django 3 tutorial ever written*.*\"]]],[1,\"p\",[[0,[],0,\"We\u2019re going to be running Django locally for the purpose of this tutorial. If you\u2019re looking for details to set up Django on Ubuntu, I\\'d start \"],[0,[2],1,\"here.\"]]],[10,1],[1,\"h3\",[[0,[],0,\"Installing Django in a Virtual Environment\"]]],[1,\"p\",[[0,[],0,\"As always, we want to set up a virtual environment for our project before installing Python packages. Feel free to use whichever Python virtual environment you\\'re comfortable with; I\\'m personally going to use \"],[0,[5],1,\"Pipenv\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[4],1,\"cd\"],[0,[],0,\" into the directory you\\'d like to start your app in and create your virtual environment:\"]]],[10,2],[1,\"p\",[[0,[],0,\"Now we have an active virtual environment with Django installed. Just to make sure everything is fine, run the following line to check the proper version of Django was installed:\"]]],[10,3],[1,\"p\",[[0,[],0,\"We\\'re ready to rock. Lucky for us, Django has a built-in command called \"],[0,[4],1,\"django-admin\"],[0,[],0,\" to help us generate our first project (amongst other things we\\'ll explore later). To generate the scaffolding for our project, we invoke one of \"],[0,[4],1,\"django-admin\"],[0,[],0,\"\\'s methods called \"],[0,[4],1,\"startproject\"],[0,[],0,\":\"]]],[10,4],[1,\"p\",[[0,[],0,\"Boom, we just started our first project! My project happens to be called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\". Let\\'s see what\\'s inside.\"]]],[1,\"h2\",[[0,[],0,\"Anatomy of a Django App\"]]],[1,\"p\",[[0,[],0,\"The first key to understanding Django is understanding the pieces that make it work. Here are the \\\\\"pieces\\\\\" we created by starting our project:\"]]],[10,5],[1,\"p\",[[0,[],0,\"Our new project contains one \"],[0,[3],1,\"file\"],[0,[],0,\" and one \"],[0,[3],1,\"directory\"],[0,[],0,\". We\\'ll touch on what purpose \"],[0,[2],1,\"manage.py\"],[0,[],0,\" serves in a moment, but let\\'s first address the glaring question: is why there a folder called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" in our project called \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\"? It\u2019s as though we just started a band called Iron Maiden, created a song named Iron Maiden, and featured it on our new album: Iron Maiden. It seems strange, but this begins to make sense as we unravel how Django apps scale.\"]]],[1,\"p\",[[0,[],0,\"Django projects are designed to be large by design: a single Django project is intended to consist of modules, or as Django calls them, \u201capps\u201d. Let\u2019s see what a mature Django project with multiple \u201capps\u201d might look like:\"]]],[10,6],[1,\"p\",[[0,[],0,\"It\u2019s best to think of a Django \\\\\"app\u201d as a subsection of your project that serves a general purpose. Think along the lines of a checkout flow for an e-commerce site, or logged-in user profiles: both of those examples would probably consist of multiple pages, but share common logic and assets between those pages.\"]]],[1,\"p\",[[0,[],0,\"One of our apps always shares the name of the parent project. This app contains the \u201ccore\u201d of our project: it serves as the entry point, which ties our other apps together and holds settings common to all of our apps, such as database information. It would be fairly accurate to state Django projects are a collection of app \u201cnodes,\u201d where \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" is our \u201cmaster node.\u201d Here\\'s what\\'s inside:\"]]],[3,\"ul\",[[[0,[2],1,\"settings.py \"],[0,[],0,\"handles everything imaginable related to configuration. This is where we activate Django plugins, store database credentials, set our hostname, etc. This is usually the type of file you \"],[0,[3],1,\"don\\'t \"],[0,[],0,\"want to commit to Github (or if you do, make sure to obscure the credentials).\"]],[[0,[2],1,\"urls.py\"],[0,[],0,\" is where we set the \"],[0,[3],1,\"top-level\"],[0,[],0,\" URLs for our projects. Remember: Django projects are intended to be broken up into individual modules, so this file usually reserves a URL for each module, with modules handling their \"],[0,[3],1,\"own\"],[0,[],0,\" independent URL routers. \"]],[[0,[2],1,\"wsgi.py\"],[0,[],0,\" where we point webservers like Nginx, Caddy, or whatever to serve our site. You\\'ll probably never need to touch this.\"]]]],[1,\"h3\",[[0,[],0,\"manage.py\"]]],[1,\"p\",[[0,[],0,\"We briefly glossed over the other thing created we created when we ran \"],[0,[4],1,\"django-admin\"],[0,[],0,\": \"],[0,[2],1,\"manage.py\"],[0,[],0,\". This file is the key to the kingdom: it contains logic covering everything related to \u201cmanaging\u201d our project. For example:\"]]],[3,\"ul\",[[[0,[4],1,\"python3 manage.py runserver\"],[0,[],0,\" deploys our app in \\\\\"development mode\\\\\" so that we may access it via our browser (this will be accessible via \"],[0,[2],1,\"localhost\"],[0,[],0,\" by default).\"]],[[0,[4],1,\"python3 manage.py migrate\"],[0,[],0,\" updates your project\\'s database tables to match the data models you\\'ve defined.\"]],[[0,[4],1,\"python3 manage.py startapp [MY_APP_NAME]\"],[0,[],0,\" is the equivalent of \"],[0,[4],1,\"django-admin startproject [YOUR_PROJECT_NAME]\"],[0,[],0,\". Indeed, \"],[0,[3],1,\"django-admin\"],[0,[],0,\" is simply an alias for \"],[0,[3],1,\"manage.py!\"]]]],[1,\"p\",[[0,[],0,\"Definitely check out what \"],[0,[2],1,\"manage.py\"],[0,[],0,\" can do by running \"],[0,[4,4],1,\"python3 manage.py\"],[0,[],1,\" --help\"],[0,[],0,\" to list all \"],[0,[6],1,\"commands\"],[0,[],0,\" some other time. For now, we have a job to do: let\\'s make an app. \"]]],[1,\"p\",[[0,[],0,\"So far, all our app can do is serve a generic canned page confirmed that Django was installed correctly. Let\\'s confirm all is good:\"]]],[10,7],[1,\"p\",[[0,[],0,\"Now open your browser and check out \"],[0,[7],1,\"http://127.0.0.1:8000/\"],[0,[],0,\":\"]]],[10,8],[1,\"p\",[[0,[],0,\"Seeing this page is a beautiful thing, but we\u2019ve only barely started to lay the groundwork for a respectable app. Django development truly begins with its configuration, but don\\'t gloss over this just because it sounds boring: setting up Django reveals everything about how the framework works as a whole\"],[0,[2],1,\".\"]]],[1,\"h2\",[[0,[],0,\"Settings.py: The Gist of Django\"]]],[1,\"p\",[[0,[],0,\"The top section of \"],[0,[2],1,\"settings.py\"],[0,[],0,\" contains configuration variables that Django absolutely depends on to function. Without any modifications, this section should look as follows:\"]]],[10,9],[1,\"p\",[[0,[2],1,\"SECRET_KEY\"],[0,[],0,\" is a concept you might already be familiar with: in short, this is a random string of characters that Django uses to encrypt sensitive information passed around the app. This is automatically generated for you, but please, for the love of Steve Buscemi, just don\\'t share it with anybody.\"]]],[1,\"p\",[[0,[],0,\"Sometimes we make mistakes when writing code, and it isn\\'t always easy to figure out what when wrong.\"],[0,[2],1,\" \"],[0,[],0,\"With\"],[0,[2],1,\" DEBUG \"],[0,[],0,\"enabled, any parts of your app which throw errors will serve you a detailed error report of what went wrong.\"]]],[1,\"p\",[[0,[2],1,\"ALLOWED_HOSTS \"],[0,[],0,\"seems comically understated, as it is \"],[0,[3],1,\"the\"],[0,[],0,\" most important variable we to get Django working. When Django is running, ALLOWED_HOSTS serves as a whitelist for which traffic pointing to your app it will actually acknowledge. You could have Nginx perfectly configured to point to your Django app, but if the traffic source from Nginx isn\\'t present in ALLOWED_HOSTS, your app will not be accessible. \"]]],[1,\"p\",[[0,[],0,\"We\\'re going to run our app locally, so we should include \\\\\"hosts\\\\\" synonymous with your local machine:\"]]],[10,10],[1,\"p\",[[0,[],0,\"It\\'s a bit curious that hosts like \"],[0,[2],1,\"localhost\"],[0,[],0,\" aren\\'t present here by default. Whatever.\"]]],[1,\"p\",[[0,[],0,\"If you were building an app to be served at a domain like \"],[0,[2],1,\"example.com\"],[0,[],0,\", you\\'d include that hostname in your allowed hosts like so:\"]]],[10,11],[1,\"p\",[[0,[],0,\"Next in our configuration is \"],[0,[2],1,\"INSTALLED_APPS\"],[0,[],0,\". This one is a doozy; remember when we mentioned Django being a collection of modules called \\\\\"apps\\\\\"? When we create an app in Django, we need to add it to INSTALLED_APPS to actually be recognized and served in our project. The admittedly strange part about this is that Django considers its own core features to be called \\\\\"apps\\\\\" as well, which is why we see things like Django\\'s admin library pre-populated here. It\\'s not intuitive. We\\'ll come back to this after making our first \\\\\"app\\\\\" in a moment.\"]]],[1,\"h3\",[[0,[],0,\"Setting up a Database\"]]],[1,\"p\",[[0,[],0,\"Django really, really wants you to configure a database upfront, even if you aren\\'t going to use it right away. In fact, running \"],[0,[4],1,\"manage.py runserver\"],[0,[],0,\" without setting a database will \"],[0,[3],1,\"automatically create an SQLite database by default\"],[0,[],0,\". That\\'s because the database section of \"],[0,[2],1,\"settings.py\"],[0,[],0,\" starts off like this:\"]]],[10,12],[1,\"p\",[[0,[],0,\"Take special notice to the \"],[0,[2],1,\"ENGINE\"],[0,[],0,\" key and how it specifies that we\\'re using an SQLite database. This is Django using its internal SQLite connector to connect to our database. We aren\\'t limited to SQLite, however; any of the following database flavors are supported out of the box:\"]]],[3,\"ul\",[[[0,[4],1,\"\\'django.db.backends.mysql\\'\"],[0,[],0,\" (includes MariaDB in Django 3)\"]],[[0,[4],1,\"\\'django.db.backends.postgresql\\'\"]],[[0,[4],1,\"\\'django.db.backends.sqlite3\\'\"]],[[0,[4],1,\"\\'django.db.backends.oracle\\'\"]]]],[1,\"p\",[[0,[],0,\"We won\\'t be needing a database for our intro app, but if we hypothetically wanted our app to use a MySQL database, our config might look something like this:\"]]],[10,13],[1,\"p\",[[0,[],0,\"Even though we specify \"],[0,[4],1,\"\\'ENGINE\\': \\'django.db.backends.mysql\\'\"],[0,[],0,\", we still need to install the MySQL connector that Django expects, which happens to be \"],[0,[4],1,\"mysqlclient\"],[0,[],0,\". I don\\'t understand why, and I\\'d rather move the reasons why this is annoying:\"]]],[10,14],[1,\"h3\",[[0,[],0,\"Logging\"]]],[1,\"p\",[[0,[],0,\"Configuring logging is optional, but I\\'d recommend configuring this to keep a record of things gone wrong. Feel free to steal my configuration below:\"]]],[10,15],[1,\"h3\",[[0,[],0,\"Static Files\"]]],[1,\"p\",[[0,[],0,\"In the spirit of backend developers disrespecting frontend code, Django refers to all frontend code (such as JS, CSS, images, etc.) as \\\\\"static files.\\\\\" The term seems to imply that the product of frontend development is an afterthought to be tossed into a folder and forgotten, but whatever; we backed developers aren\\'t exactly heralded for our camaraderie or social skills.\"]]],[1,\"p\",[[0,[],0,\"We\\'ll keep all static files in one place for the purposes of \"],[0,[3],1,\"our\"],[0,[],0,\" app, but it\\'s otherwise somewhat common for Django apps to each contain their own styles and JavaScript. Our simple configuration looks like this:\"]]],[10,16],[1,\"p\",[[0,[],0,\"This means that our \\\\\"master node\\\\\" app, \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\", will host all of our CSS and what-not in a subdirectory called \"],[0,[2],1,\"/static\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Extra Settings\"]]],[1,\"p\",[[0,[],0,\"There are a lot more things we \"],[0,[3],1,\"could\"],[0,[],0,\" add to \"],[0,[2],1,\"settings.py\"],[0,[],0,\" ranging from email settings, file uploads, security tokens, whatever, If you\\'d like to explore those things, be my guest and \"],[0,[8],1,\"read the documentation\"],[0,[],0,\". The one variable I \"],[0,[3],1,\"will\"],[0,[],0,\" call out, however, is \"],[0,[2],1,\"APPEND_SLASH\"],[0,[],0,\". Enforcing slashes on URLs is dope as hell, so you should totally do this unless you\\'re some kind of weirdo:\"]]],[10,17],[1,\"h2\",[[0,[],0,\"Templates and Static Assets\"]]],[1,\"p\",[[0,[],0,\"Quick recap: Django projects are made up of modules called \\\\\"apps.\\\\\" Of these apps, there is always a \\\\\"master\\\\\" app that contains settings, logic, and anything to be shared across all child apps. \"]]],[1,\"p\",[[0,[],0,\"Page templates and static assets are among the things we can choose to share between apps in a Django project: If every part of our project is going to share the same base styles or the same HTML meta headers, we can opt to keep those things in \"],[0,[2],1,\"tutorialapp\"],[0,[],0,\" for our other apps to use. We\\'ll keep our site-wide styles and images in a directory named \"],[0,[2],1,\"/static,\"],[0,[],0,\" and our base page template in \"],[0,[2],1,\"/templates\"],[0,[],0,\". \"]]],[1,\"h3\",[[0,[],0,\"Our Base Page Template\"]]],[1,\"p\",[[0,[],0,\"If you aren\\'t familiar with page templating systems like Handlebars or Jinja, I\\'m gonna have to leave you in the dark here to keep moving. Take a few minutes to read up on \"],[0,[9],1,\"Jinja\"],[0,[],0,\" when you can.\"]]],[1,\"p\",[[0,[],0,\"Every page of most sites shares roughly the same boilerplate of meta tags and so forth. Instead of duplicating boilerplate every time we make a new page, we\\'ll create a \\\\\"base\\\\\" page called \"],[0,[2],1,\"layout.html\"],[0,[],0,\" which we\\'ll use to load other page templates into:\"]]],[10,18],[1,\"p\",[[0,[],0,\" \"],[0,[4],1,\"{% load static %}\"],[0,[],0,\" tells Django to look for our static files in our static folder. It\\'s a bit redundant, but whatever. Once that\\'s done, we can load in assets like stylesheets as we do with \"],[0,[4],1,\"{% static \\'css/styles.css\\' %}\"]]],[1,\"p\",[[0,[],0,\"With that done, \"],[0,[2],1,\"djangotutorial\"],[0,[],0,\" now looks like this: \"]]],[10,19],[1,\"h2\",[[0,[],0,\"Making a Django \\\\\"App\\\\\"\"]]],[1,\"p\",[[0,[],0,\"We\\'re roughly 3000 words deep into this tutorial and we haven\\'t even written any meaningful logic yet. I wasn\\'t kidding when I said Django was rigid, but the good news is getting set up is the hardest part: everyday Django development is far more straightforward than what we\\'ve dealt with so far.\"]]],[1,\"p\",[[0,[4],1,\"cd\"],[0,[],0,\" back into the top-level directory which contains \"],[0,[2],1,\"manage.py\"],[0,[],0,\". We\\'ll create our first app by using this command:\"]]],[10,20],[1,\"p\",[[0,[3],1,\"Now\"],[0,[],0,\" we can start writing actual business logic. Remember: our goal is to serve a single-page application. Eyes on the prize here, folks.\"]]],[1,\"p\",[[0,[],0,\"I used the \"],[0,[4],1,\"startapp\"],[0,[],0,\" command to create a Django app named \"],[0,[2],1,\"myapp\"],[0,[],0,\". Here\\'s what came out of it:\"]]],[10,21],[1,\"p\",[[0,[],0,\"Models? Views? Things are starting to feel more MVC already. Here are the broad strokes of what makes a Django app tick:\"]]],[3,\"ul\",[[[0,[2],1,\"models.py\"],[0,[],0,\" is where we\\'d store database models for Django\\'s ORM. For the scope of this tutorial, we aren\\'t going to bother with database interactions. By the time we actually manage to serve a page template, we\\'ll both be too burnt out to function anyway.\"]],[[0,[2],1,\"views.py\"],[0,[],0,\" is where we handle building and serving \\\\\"views\\\\\" to users - more on this in a moment.\"]],[[0,[2],1,\"urls.py\"],[0,[],0,\" is actually missing here, but it\\'s expected that any Django app intending to \\\\\"serve\\\\\" pages or endpoints will have them. Setting \\\\\"urls\\\\\" is equivalent to setting routes: this is where we tell Django to serve view X when visiting URL Y.\"]]]],[1,\"p\",[[0,[],0,\"To make our first page, we\\'ll start by creating a view in \"],[0,[2],1,\"views.py\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[],0,\"Creating a Homepage\"]]],[1,\"p\",[[0,[],0,\"A \"],[0,[3],1,\"view\"],[0,[],0,\" is simply \\\\\"something to serve to a user at a given URL.\\\\\" When a user requests a URL from whichever domain Django is hosted on, Django looks through its collection of routes (the stuff in \"],[0,[2],1,\"urls.py\"],[0,[],0,\") to see if the requested URL is associated with a \"],[0,[3],1,\"view\"],[0,[],0,\". If an association exists, Django passes information about the requester to the view function, and the user is served a response (like a web page). Here\\'s what a simple view looks like:\"]]],[10,22],[1,\"p\",[[0,[],0,\"The only \\\\\"magic\\\\\" happening here is thanks to two things Django provides to us: the \"],[0,[4],1,\"request\"],[0,[],0,\" object and the \"],[0,[4],1,\"render\"],[0,[],0,\" function:\"]]],[3,\"ul\",[[[0,[2],1,\"request\"],[0,[],0,\" is an object inherently passed to a view whenever a view is requested. \"],[0,[4],1,\"request\"],[0,[],0,\" contains metadata about the incoming request such as headers, parameters, HTTP method, etc. Most views would use this metadata as a way to serve responses contextually, but we\\'re not going to do anything special today.\"]],[[0,[2],1,\"render\"],[0,[],0,\" builds a response to serve to users. In this case, we\\'re returning a page template called \"],[0,[3],1,\"index.html, \"],[0,[],0,\"as well as a few variables to render with our page dynamically.\"]]]],[1,\"p\",[[0,[],0,\"So our view is set to return a template at \"],[0,[2],1,\"myapp/index.html\"],[0,[],0,\", but that template doesn\\'t actually exist yet. We need to create a \"],[0,[2],1,\"templates\"],[0,[],0,\" folder in our \\\\\"myapp\\\\\" module. Django looks for templates here in a way that isn\\'t \"],[0,[3],1,\"entirely\"],[0,[],0,\" intuitive. Check out our app\\'s folder structure after we add a template and corresponding stylesheet:\"]]],[10,23],[1,\"p\",[[0,[],0,\" Yes, our \"],[0,[2],1,\"/templates\"],[0,[],0,\" folder contains a subdirectory named \"],[0,[2],1,\"/myapp\"],[0,[],0,\",\"],[0,[2],1,\" \"],[0,[],0,\"which\"],[0,[2],1,\" \"],[0,[],0,\"matches the name of the Django app. This a Django thing, and it\\'s admittedly a bit confusing.\"]]],[1,\"p\",[[0,[],0,\"Moving on to \"],[0,[2],1,\"index.html\"],[0,[],0,\", all we need to do here is extend the \"],[0,[2],1,\"layout.html\"],[0,[],0,\" template we made earlier and fill in some content. We\\'ll load in the attributes we passed in our view to keep things interesting:\"]]],[10,24],[1,\"p\",[[0,[],0,\"Values in double brackets (\"],[0,[4],1,\"{{title}}\"],[0,[],0,\", \"],[0,[4],1,\"{{template}}\"],[0,[],0,\", and \"],[0,[4],1,\"{{description}}\"],[0,[],0,\") will be replaced with the values of the matching keys in the dictionary we created in our index view. Then, the entirety of our block named \\\\\"content\\\\\" will get loaded into the space we reserved in \"],[0,[2],1,\"layout.html\"],[0,[],0,\" for the very same block name.\"]]],[1,\"h3\",[[0,[],0,\"Setting a URL Route\"]]],[1,\"p\",[[0,[2],1,\"myapp\"],[0,[],0,\" now has a view, as well as a corresponding template. The only thing missing is specifying which URL should \"],[0,[3],1,\"route\"],[0,[],0,\" to this view. Go ahead and create \"],[0,[2],1,\"urls.py\"],[0,[],0,\":\"]]],[10,25],[1,\"p\",[[0,[4],1,\"urlpatterns\"],[0,[],0,\" is a list of \"],[0,[4],1,\"path\"],[0,[],0,\"s, where each \"],[0,[4],1,\"path\"],[0,[],0,\" consists of three parameters:\"]]],[3,\"ol\",[[[0,[],0,\"The URL pattern to serve our view at. This always takes the form of a regex pattern. In our example, we want our view to be the homepage, therefore providing an empty string tells Django to serve our view at our site\\'s root.\"]],[[0,[],0,\"The view we created in \"],[0,[2],1,\"views.py\"],[0,[],0,\". This is the view that will be served to the user when visiting the URL pattern specified above.\"]],[[0,[],0,\"The \\\\\"name\\\\\" of our route. Giving our route a name is an easy way to reference URL patterns later on.\"]]]],[1,\"p\",[[0,[2],1,\"urls.py\"],[0,[],0,\" allows us to set different URLs pointing to the same view, meaning we can serve the same view at different URLs. For example, here\\'s how we can expand \"],[0,[4],1,\"urlpatterns\"],[0,[],0,\" to serve the same page at different URLs:\"]]],[10,26],[1,\"p\",[[0,[],0,\"Django will now respect three different routes to serve our homepage: \"],[0,[4],1,\"/home\"],[0,[],0,\", \"],[0,[4],1,\"/home?user=todd\"],[0,[],0,\", and our root (aka \"],[0,[4],1,\"/\"],[0,[],0,\"). The last example is a way to specify query string parameters to our view, which is a good way to offer context to our views for more dynamic content. \"]]],[1,\"p\",[[0,[],0,\"It\\'s worth noting that we\\'re allowed to specify the same name for each of these routes, even though they can technically accept URLs.\"]]],[1,\"h2\",[[0,[],0,\"Activating myapp\"]]],[1,\"p\",[[0,[],0,\"Our app is almost ready! There\\'s one thing left to do... remember the list of \"],[0,[4],1,\"INSTALLED_APPS\"],[0,[2],1,\" \"],[0,[],0,\"that lives in \"],[0,[2],1,\"settings.py\"],[0,[],0,\"? We still need to add our app here before Django respects it: \"]]],[10,27],[1,\"p\",[[0,[],0,\"We\\'re almost there, folks. Our app is good-to-go, and it\\'s been sufficiently \\\\\"installed.\\\\\" The only thing left is tell our core Django app to listen to the urls \"],[0,[2],1,\"myapp/urls.py\"],[0,[],0,\" in our main module. To do this, we need to modify our core Django app\\'s \"],[0,[2],1,\"urls.py\"],[0,[],0,\" to look something like this:\"]]],[10,28],[1,\"p\",[[0,[],0,\"This probably seems confusing as shit, but the good news is \"],[0,[2,3],2,\"we\\'re done! \"],[0,[],0,\"Let\\'s wrap our heads around this before we see our app in action.\"]]],[1,\"p\",[[0,[],0,\"Any time a user visits our deployed Django server (at 127.0.0.1:8000 in our case),   our \\\\\"master app\\\\\" \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"picks up the incoming traffic. \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"compares the URL the user provided to its list of URLs in \"],[0,[2],1,\"urls.py\"],[0,[],0,\", and if a match is found, the user is then directed accordingly. In our example, we\\'re expecting users only to visit the homepage (AKA the root directory, AKA \"],[0,[4],1,\"/\"],[0,[],0,\"), which is why our url is seen as an empty string. Our \"],[0,[2],1,\"urls.py\"],[0,[],0,\" file tells \"],[0,[2],1,\"djangotutorial \"],[0,[],0,\"to \"],[0,[3],1,\"defer \"],[0,[],0,\"traffic coming to this URL to \"],[0,[2],1,\"myapp\"],[0,[],0,\", which then takes over from there. The end result is effectively a route that points to another route, which points to a view, which happens to serve our homepage. Run \"],[0,[4],1,\"python manage.py runserver\"],[0,[],0,\" to see for yourself:\"]]],[10,29],[1,\"h2\",[[0,[],0,\"I Hope Somebody Actually Read This\"]]],[1,\"p\",[[0,[],0,\"I\\'ve you\\'ve managed to survive this long, you\\'re probably feeling a lot of emotions right now. Fatigue, pride, confusion, hope... perhaps all of the above. This is normal, especially if you happen to be a newcomer to MVC (in which case I\\'m sorry that you landed \"],[0,[3],1,\"here\"],[0,[],0,\" of all places).\"]]],[1,\"p\",[[0,[],0,\"Make no mistake: Django is no joke. The power of a fully-featured web framework comes with a lot of shit to unpack, but the feeling of  overwhelming complexity fades quickly as these patterns become more familiar. As with all things software related, it takes a bit of fussing around before the concepts of Django truly \\\\\"click.\\\\\" For that reason, I\\'ve gone ahead and uploaded the source code for this tutorial to Github for you to pull down and mess around with. You might just be surprised by what you come up with.\"]]],[10,30],[1,\"p\",[]]]}', 'comment_id': '5a101454d201b772c140d36e', 'feature_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'featured': False, 'status': 'published', 'visibility': 'public', 'created_at': '2017-11-18T11:07:00.000Z', 'updated_at': '2020-11-13T16:17:02.000Z', 'published_at': '2019-12-04T17:49:00.000Z', 'custom_excerpt': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'codeinjection_head': None, 'codeinjection_foot': None, 'custom_template': None, 'canonical_url': None, 'send_email_when_published': False, 'authors': [{'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T19:46:04.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T19:46:04.000Z', 'url': 'https://hackersandslackers.app/author/todd/'}], 'primary_author': {'id': '1', 'name': 'Todd Birchard', 'slug': 'todd', 'email': 'todd@hackersandslackers.com', 'profile_image': 'https://hackersandslackers-cdn.storage.googleapis.com/authors/todd@2x.jpg', 'cover_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/03/fantasticmrfox.jpg', 'bio': 'Engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.', 'website': 'https://toddbirchard.com', 'location': 'New York City', 'facebook': 'https://github.com/toddbirchard', 'twitter': '@ToddRBirchard', 'accessibility': '{\"nightShift\":true,\"views\":[{\"name\":\"WIP\",\"route\":\"posts\",\"color\":\"green\",\"filter\":{\"type\":\"draft\",\"author\":\"todd\"}},{\"name\":\"Series: Lynx Roundup\",\"route\":\"posts\",\"color\":\"pink\",\"filter\":{\"tag\":\"roundup\"}},{\"name\":\"Series: Building Flask Apps\",\"route\":\"posts\",\"color\":\"blue\",\"filter\":{\"tag\":\"building-flask-apps\",\"author\":\"todd\"}},{\"name\":\"Series: Pandas\",\"route\":\"posts\",\"color\":\"purple\",\"filter\":{\"tag\":\"data-analysis-pandas\"}},{\"name\":\"Series: Code Snippet Corner\",\"route\":\"posts\",\"color\":\"teal\",\"filter\":{\"tag\":\"code-snippet-corner\"}},{\"name\":\"Todd\\'s Posts\",\"route\":\"posts\",\"color\":\"midgrey\",\"filter\":{\"author\":\"todd\"}}],\"navigation\":{\"expanded\":{\"posts\":false}}}', 'status': 'active', 'meta_title': None, 'meta_description': None, 'tour': '[\"upload-a-theme\",\"getting-started\"]', 'last_seen': '2020-11-19T19:46:04.000Z', 'created_at': '2019-11-07T14:38:35.000Z', 'updated_at': '2020-11-19T19:46:04.000Z', 'url': 'https://hackersandslackers.app/author/todd/'}, 'url': 'https://hackersandslackers.app/getting-started-django/', 'excerpt': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'og_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'og_title': 'Getting Started with Django', 'og_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'twitter_image': 'https://hackersandslackers-cdn.storage.googleapis.com/2020/11/django-gettingstarted.png', 'twitter_title': 'Getting Started with Django', 'twitter_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'meta_title': 'Getting Started with Django', 'meta_description': 'The crash-course for newcomers to Python\u2019s largest web framework. Create your first functioning Django web application.', 'email_subject': 'Getting Started with Django'}]}", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/19/2020, 15:10:55", "message": "Fetched Ghost post `getting-started-django` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5bf92)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/21/2020, 23:12:59", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/21/2020, 23:12:59", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/21/2020, 23:13:00", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/21/2020, 23:14:31", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/21/2020, 23:14:31", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/21/2020, 23:14:32", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/21/2020, 23:14:50", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/21/2020, 23:14:50", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/21/2020, 23:14:51", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/21/2020, 23:15:50", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/21/2020, 23:15:50", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/21/2020, 23:15:51", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "11/22/2020, 02:05:17", "message": "Granted Ghost auth token.", "level": "INFO", "function": "session_token", "module": "clients.ghost"},
{"time": "11/22/2020, 02:05:18", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "11/22/2020, 02:05:18", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `The Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "12/12/2020, 19:43:23", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "12/12/2020, 19:43:23", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "12/12/2020, 19:55:26", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "12/12/2020, 19:55:27", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "12/12/2020, 19:55:46", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "12/12/2020, 19:55:46", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "12/12/2020, 19:56:04", "message": "Fetched Ghost post `hostile-extraction-of-tableau-server-data` (https://hackersandslackers.app/ghost/api/v3/admin/posts/5dc42cb812c9ce0d63f5c0c3)", "level": "INFO", "function": "get_post", "module": "clients.ghost"},
{"time": "12/12/2020, 19:56:05", "message": "Successfully sent email to todd@hackersandslackers.com with subject `Hackers and Slackers: Loser commented on your post `Hostile Extraction of Tableau Server Data``", "level": "SUCCESS", "function": "send_email", "module": "clients.mail"},
{"time": "12/12/2020, 19:56:05", "message": "b'Forbidden'", "level": "INFO", "function": "test_comment_email", "module": "clients.tests.test_mail"},
